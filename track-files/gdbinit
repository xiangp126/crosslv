# Put this file as ~/.gdbinit and it is sourced by GDB when it starts up

# Here's a summary of the predefined hooks available in GDB:
#
# hook-stop: Executes whenever program execution stops for any reason (breakpoints, watchpoints, stepping, signals, etc.)
# hook-run: Executes when you start program execution with the run command
# hook-continue: Executes when you continue execution with the continue command
# hook-step: Executes when you use the step command
# hook-next: Executes when you use the next command
# hook-finish: Executes when you use the finish command
# hook-until: Executes when you use the until command
# hook-stepi: Executes when you use the stepi command
# hook-nexti: Executes when you use the nexti command
# hook-quit: Executes when you quit GDB
#
# Each hook can be defined using the define command followed by the hook name, your commands, and then end:
#
# (gdb) define hook-stop
# > your-commands-here
# > end
#
# Example to use hook-stop to execute a command whenever the program stops:
# define hook-stop
# Type commands for definition of "hook-stop".
# End with a line saying just "end".
# pl cstrm->input --buff-region-data   <== My self-defined command
# end
# (gdb) show user hook-stop
# User command "hook-stop":
#   pl cstrm->input --buff-region-data
#
# To delete the hook-stop, you use the define command again, but make the hook-stop empty:
# (gdb) define hook-stop
# Type commands for definition of "hook-stop".
# End with a line saying just "end".
# >end
# (gdb)

# TUI settings
set style tui-border foreground none
set tui active-border-mode normal
set style function foreground magenta
set style function intensity normal
set style filename foreground red
set style filename intensity normal
set tui tab-width 8
set tui compact-source

layout src
fs cmd
winheight cmd +6

# Configure logging
set logging file ~/.gdb.log
set logging enabled on
set trace-commands on

# Basic settings
set prompt (gdb) 
set confirm off
set print pretty on
set pagination off

# Debugging settings
set disassembly-flavor intel
set can-use-hw-watchpoints 1
set follow-fork-mode child

# Initialize convenience variables
set $_gdb_tools_sourced = 0
set $_gdb_target_script = "~/target.sh"
set $_gdb_tools_script = "~/Templates/gdb_tools.py"

# Connect to the target defined in target.sh
define connect
    python
import os
target_path = os.path.expanduser(gdb.parse_and_eval("$_gdb_target_script").string())
tools_path = os.path.expanduser(gdb.parse_and_eval("$_gdb_tools_script").string())

if not os.path.exists(target_path):
    gdb.write(f"+++Error: Target script {target_path} not found\n")
else:
    gdb.execute(f"source {target_path}")

if int(gdb.parse_and_eval("$_gdb_tools_sourced")) == 0:
    if not os.path.exists(tools_path):
        gdb.write(f"Error: Tools script {tools_path} not found\n")
    else:
        gdb.execute(f"source {tools_path}")
        gdb.execute("set $_gdb_tools_sourced = 1")
        gdb.write("+++GDB tools loaded successfully\n")
else:
    pass
    end
end
document connect
    Connect to remote target and load debugging tools.
    Usage: connect
end

# Load the shared library from local path
define ftnt
    if $argc == 0
        set sysroot .
        set solib-search-path ./rlib:./fortipkg/lib/x86_64:./fortipkg/lib/x86_64/providers
    else
        set sysroot $arg0
        set solib-search-path $arg0/rlib:$arg0/fortipkg/lib/x86_64:$arg0/fortipkg/lib/x86_64/providers
    end
end
document ftnt
    Set sysroot and solib-search-path for shared libraries.
    Usage: ftnt [sysroot_path]
    If sysroot_path is not specified, current directory is used.
    Use 'info sharedlibrary' to check the shared library status.
end

# Reload the binary and source code after the binary is updated
define reload
    file sysinit/init
    directory
end
document reload
    Reload the binary and reset source directory.
    Usage: reload
end

define undefine-hook-stop
    define hook-stop
    end
end
document undefine-hook-stop
    Empties the hook-stop hook by redefining it with an empty body.
    Usage: undefine-hook-stop
    Example: undefine-hook-stop
end

# Initialize shared library paths
ftnt