#!/bin/bash
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=2000
HISTFILESIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
# shopt -s globstar

# export PS1="\u@${HOSTNAME:0:10}:\W\$ "
# Bash provides an environment variable called PROMPT_COMMAND.
# The contents of this variable are executed as a regular Bash command just before Bash displays a prompt.
PROMPT_COMMAND='pwd2=$(sed -e "s:$HOME:~:" -e "s:\(\.\?[^/]\)[^/]*/:\1/:g" <<< $PWD)'
PS1="\u@${HOSTNAME:0:10}:\${pwd2:0:30}\$ "

# Disable XON/XOFF software flow control to make <C-S> work in Vim.
stty -ixon

# Below is my own configuration.
# LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:\
#        cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42"
# ow is other-writable, st is sticky
# export LS_COLORS=$LS_COLORS:'ex=0;0:ln=36:di=34:ow=01;90'
export LS_COLORS=$LS_COLORS:'ex=0;0:ln=36:di=34'

if [[ $(uname -s) == 'Darwin' ]]; then
    alias ls='ls -G' # Compatible with Mac
else
    # Linux
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
fi
alias ll='ls -lF'
alias ll.='ls -alF'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep -i --color=auto'
alias gdb='gdb -q'
# alias valgrind='valgrind --tool=memcheck --leak-check=full --show-reachable=yes'
alias rg='rg --smart-case --color=ansi'
alias tmux='tmux -u'
alias yt-dlp='yt-dlp --verbose'
alias youtube-dl='yt-dlp --external-downloader aria2c --external-downloader-args "-x 16 -s 16" -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --write-auto-subs --sub-langs zh-Hans'
alias rsync='rsync -azPv'
alias jn='jr --no-clipboard'
# alias to change directory
function __cd () {
    if [ -d "$1" ]; then
        cd "$1" || exit
    fi
}
alias cdg='__cd $HOME/myGit'
alias cdf='__cd $HOME/myGit/fos'
alias cdv='__cd $HOME/myGit/crosslv'
alias cdb='__cd $HOME/.usr/bin'
alias cdt='__cd $HOME/test'
alias cdT='__cd $HOME/Templates'
alias cdD='__cd $HOME/Downloads'
alias cdU='__cd $HOME/Uploads'
alias cdP='__cd $HOME/Public'
alias cdR='__cd $HOME/Recycled'
alias cdd='__cd /data'
alias cdB='__cd /data/bugzilla'
alias cdL='__cd /data/bugzilla'
# alias cdL='__cd /data/logs'
alias cdo='__cd /opt'
alias cds='__cd /opt/src'
alias cdn='__cd /opt/nginx'
alias cdN='__cd /usr/local/nginx'

# print entry names without quoting
export QUOTING_STYLE=literal
# set theme for the bat(batcat) command
export BAT_THEME=TwoDark
# VSCode settings
setCodePath() {
    [ -z "$VSCODE_IPC_HOOK_CLI" ] && return
    local paths searchDir count version syspath newIPCHooK
    local -A map=()
    local MAGENTA='\033[0;35m'
    local LIGHTYELLOW='\033[93m'
    local RESET='\033[0m'
    syspath="/run/user/$UID"
    searchDir="$HOME/.vscode-server/cli"

    readarray -d '' paths < <(find "$searchDir" -type f -name code -executable -print0)
    count=${#paths[@]}
    if [[ $count -eq 0 ]]; then
        echo -e "${MAGENTA}Error: No code binary found under $searchDir${RESET}" >&2
    elif [[ $count -gt 1 ]]; then
        echo -e "${LIGHTYELLOW}Warning: Please remove the older versions of code.${RESET}" >&2
        for path in "${paths[@]}"
        do
            version=$("$path" --version | head -n 1 | grep -oP '[0-9]+\.[0-9]+\.[0-9]+')
            map["$path"]=$version
        done
        for path in "${!map[@]}"
        do
            echo -e "${MAGENTA}${map[$path]}${RESET} : $path"
        done
    fi

    # Get the most recenely created/modified vscode-ipc-*.sock file
    newIPCHooK=$(find "$syspath" -maxdepth 1 -type s -name 'vscode-ipc-*.sock' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n 1 | cut -d' ' -f2-)
    if [[ -z $newIPCHooK ]]
    then
        echo -e "${MAGENTA}Error: No vscode-ipc-*.sock file found in $syspath${RESET}" >&2
        return
    fi

    # VSCODE_IPC_HOOK_CLI is an environment variable that is used by the VS Code CLI to communicate with the server.
    # But you have to remember that only the sub shell can see the new value.
    export VSCODE_IPC_HOOK_CLI=$newIPCHooK
    export VSCODE_BIN_PATH="${paths[0]}"
}
export -f setCodePath

# Useful local variables.
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
# export SHELL=/bin/bash
# export EDITOR=vim
export SSLKEYLOGFILE=~/.ssl-keys.log # Wireshark to decode SSL/TLS traffic
PKG_CONFIG_PATH=$HOME/.usr/lib/pkgconfig:/usr/local/lib/pkgconfig
LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.usr/lib:$HOME/.usr/lib64
PATH=$HOME/.usr/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    PATH=$PATH:$HOME/.local/bin
fi
export PATH
export PKG_CONFIG_PATH
export LD_LIBRARY_PATH
unset TMOUT
export FORTIPKG="$HOME/fortipkg" # FOS variables.

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# find bash completion for third-party tools | only for Mac
if [[ -d /usr/local/etc/bash_completion.d ]]; then
    for file in /usr/local/etc/bash_completion.d/*; do
        # shellcheck disable=SC1090
        [[ -L $file ]] && . "$file"
    done
fi
trackedCompletionDir="$HOME/.bash_completion.d"
if [[ -d "$trackedCompletionDir" ]]; then
    for file in "$trackedCompletionDir"/*; do
        # shellcheck disable=SC1090
        [[ -f $file ]] && source "$file"
    done
fi

# Settings for fzf -- the fuzzy finder
# Use fd (https://github.com/sharkdp/fd) instead of the default find
if command -v fd &> /dev/null; then
    FZF_DEFAULT_COMMAND="fd . \
                         --hidden \
                         --follow \
                         --no-ignore \
                         --exclude '.vscode-server' \
                         --exclude '.git' \
                         --exclude '.cache' \
                         --exclude '*.sw[p|o]' \
                         --exclude '*.[a|o]' \
                         --exclude '*.so' \
                        "
    FZF_DEFAULT_COMMAND=${FZF_DEFAULT_COMMAND//+([[:space:]])/ }
    FZF_ALT_C_COMMAND="fd . \
                       --type d \
                       --hidden \
                       --follow \
                       --no-ignore \
                       --exclude '.vscode-server' \
                       --exclude '.git' \
                       "
    FZF_ALT_C_COMMAND=${FZF_ALT_C_COMMAND//+([[:space:]])/ }
    export FZF_DEFAULT_COMMAND
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND

    _fzf_compgen_path() {
        eval "$FZF_DEFAULT_COMMAND"
    }
    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
        eval "$FZF_ALT_C_COMMAND"
    }
fi
export LINES=100
export FZF_TMUX_HEIGHT=60%
                #   --style default \
                #   --tmux center,95%,80% \
FZF_DEFAULT_OPTS="--layout=reverse \
                  --inline-info \
                  --color=fg+:247 \
                  --multi \
                  "
FZF_DEFAULT_OPTS=${FZF_DEFAULT_OPTS//+([[:space:]])/ }
export FZF_DEFAULT_OPTS
# Use \ as the trigger sequence instead of the default **. Followed by a TAB
export FZF_COMPLETION_TRIGGER='\'
# Options to fzf command
export FZF_COMPLETION_OPTS='+c -x'

# For fzf-tab-completion vim plugin
bind -r "*\t"
bind -x '"*\t": fzf_bash_completion'
setCodePath
