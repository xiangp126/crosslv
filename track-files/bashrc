#!/bin/bash
# shellcheck disable=SC2155 disable=SC1090 disable=SC1091

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=2000
HISTFILESIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
# shopt -s globstar

# export PS1="\u@${HOSTNAME:0:10}:\W\$ "
# Bash provides an environment variable called PROMPT_COMMAND.
# The contents of this variable are executed as a regular Bash command just before Bash displays a prompt.
PROMPT_COMMAND='pwd2=$(sed -e "s:$HOME:~:" -e "s:\(\.\?[^/]\)[^/]*/:\1/:g" <<< $PWD)'
PS1="\u@${HOSTNAME:0:10}:\${pwd2:0:30}\$ "

# Disable XON/XOFF software flow control to make <C-S> work in Vim.
stty -ixon

# Below is my own configuration.
# LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:\
#        cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42"
# ow is other-writable, st is sticky
# export LS_COLORS=$LS_COLORS:'ex=0;0:ln=36:di=34:ow=01;90'
export LS_COLORS=$LS_COLORS:'ex=0;0:ln=36:di=34'

if [[ $(uname -s) == 'Darwin' ]]; then
    alias ls='ls -G' # Compatible with Mac
else
    # Linux
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
fi
alias ll='ls -lF'
alias ll.='ls -alF'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
alias grep='grep -i --color=auto'
alias gdb='gdb -q'
alias rg='rg --smart-case --color=ansi'
alias tmux='tmux -u'
alias yt-dlp='yt-dlp --verbose'
alias youtube-dl='yt-dlp --external-downloader aria2c --external-downloader-args "-x 16 -s 16" -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" --write-auto-subs --sub-langs zh-Hans'
alias rsync='rsync -azPv'
alias jn='jr --no-clipboard'

function __cd () {
    if [ -d "$1" ]; then
        cd "$1" || exit
    fi
}
alias cdg='__cd $HOME/myGit'
alias cdv='__cd $HOME/myGit/crosslv'
alias cdb='__cd $HOME/.usr/bin'
alias cdt='__cd $HOME/test'
alias cdT='__cd $HOME/Templates'
alias cdD='__cd $HOME/Downloads'
alias cdM='__cd $HOME/Media'
alias cdU='__cd $HOME/Uploads'
alias cdP='__cd $HOME/Public'
alias cdB='__cd /data/bugzilla'
alias cdL='__cd /data/bugzilla'
alias cdd='__cd /data'
alias cdf='__cd /data/fos'
alias cdo='__cd /opt'
alias cds='__cd /opt/src'

# Print entry names without quotation marks
export QUOTING_STYLE=literal
export BAT_THEME=TwoDark
if ! declare -F __set_vscode_code_path &> /dev/null; then
    __set_vscode_code_path() {
        local MAGENTA='\033[0;35m'
        local RESET='\033[0m'
        local syspath="/run/user/$UID"
        local searchPath="$HOME/.vscode-server/cli/servers"

        # Step 1: Find the commit ID of the active VS Code server
        # Use process substitution to ensure `commitId` is set in the current shell scope, not a subshell.
        # Added -maxdepth 2 for efficiency, assuming pid.txt is in <commit_id>/pid.txt structure.
        local pidFile currentPid commitId=
        cd "$searchPath" || exit
        while IFS= read -r -d $'\0' pidFile; do
            if [ -f "$pidFile" ]; then
                currentPid=$(cat "$pidFile" 2>/dev/null)
                if [ -n "$currentPid" ] && [[ "$currentPid" =~ ^[0-9]+$ ]]; then
                    # Check if the process is actually running
                    if ps -p "$currentPid" -o pid= > /dev/null 2>&1; then
                        commitId=$(basename "$(dirname "$pidFile")")
                        break
                    fi
                fi
            fi
        done < <(find . -maxdepth 2 -type f -name 'pid.txt' -print0 2>/dev/null)

        # Step 2: Set the VSCODE_BIN_PATH
        if [[ -z "$commitId" ]]; then
            echo -e "${MAGENTA}Warning: No active VS Code server found under $searchPath.${RESET}" >&2
            cd - &> /dev/null || exit
            return 1
        fi
        VSCODE_BIN_PATH="$searchPath/$commitId/server/bin/remote-cli/code"
        if [[ ! -x "$VSCODE_BIN_PATH" ]]; then
            echo -e "${MAGENTA}Error: VS Code binary not found or not executable at $VSCODE_BIN_PATH${RESET}" >&2
            return 1
        fi

        # Step 3: Set the VSCODE_IPC_HOOK_CLI
        # Get the most recenely created vscode-ipc-*.sock file
        # shellcheck disable=SC2012
        local newIPCHook=$(ls -t "$syspath"/vscode-ipc-*.sock 2>/dev/null | head -n 1)
        if [ -z "$newIPCHook" ]; then
            echo -e "${MAGENTA}Error: No vscode-ipc-*.sock file found under $syspath${RESET}" >&2
            return 1
        fi
        # VSCODE_IPC_HOOK_CLI is an environment variable that is used by the VS Code CLI to communicate with the server.
        # But you have to remember that only the sub shell can see the new value.
        export VSCODE_IPC_HOOK_CLI=$newIPCHook
        export VSCODE_BIN_PATH

        # Step 4: Return to the original directory
        cd - &> /dev/null || exit
    }
    export -f __set_vscode_code_path
fi

# Useful local variables.
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export SSLKEYLOGFILE=~/.ssl-keys.log # Wireshark to decode SSL/TLS traffic
PKG_CONFIG_PATH=$HOME/.usr/lib/pkgconfig:/usr/local/lib/pkgconfig
LD_LIBRARY_PATH=/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/.usr/lib:$HOME/.usr/lib64
PATH="/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin"
if [ -d "$HOME/.usr/bin" ] && [[ ":$PATH:" != *":$HOME/.usr/bin:"* ]]; then
    PATH="$HOME/.usr/bin:$PATH"
fi
if [ -d "$HOME/.local/bin" ] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    PATH="$HOME/.local/bin:$PATH"
fi
export PATH
export PKG_CONFIG_PATH
export LD_LIBRARY_PATH
unset TMOUT

# load system bash completion
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    source /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
  fi
fi
# For MacOS only, load homebrew bash completion
if [[ -d /usr/local/etc/bash_completion.d ]]; then
    for file in /usr/local/etc/bash_completion.d/*; do
        [[ -L $file ]] && source "$file"
    done
fi
# Load custom bash completions
TK_COMPLETION_SELF="$HOME/.bash_completion.d"
if [ -d "$TK_COMPLETION_SELF" ]; then
    for file in "$TK_COMPLETION_SELF"/*; do
        [[ -f $file ]] && source "$file"
    done
fi
# Load xprofile - bash profile for X11
if [ -f ~/.xprofile ]; then
    source ~/.xprofile
fi
# Load nvm and nvm bash completion
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion"

# Settings for fzf -- the fuzzy finder
# Use fd (https://github.com/sharkdp/fd) instead of the default find
if command -v fd &> /dev/null; then
    FZF_DEFAULT_COMMAND="fd . \
                         --hidden \
                         --follow \
                         --no-ignore \
                         --exclude '.vscode-server' \
                         --exclude '.git' \
                         --exclude '.cache' \
                         --exclude '*.sw[p|o]' \
                         --exclude '*.[a|o]' \
                         --exclude '*.so' \
                        "
    FZF_DEFAULT_COMMAND=${FZF_DEFAULT_COMMAND//+([[:space:]])/ }
    FZF_ALT_C_COMMAND="fd . \
                       --type d \
                       --hidden \
                       --follow \
                       --no-ignore \
                       --exclude '.vscode-server' \
                       --exclude '.git' \
                       "
    FZF_ALT_C_COMMAND=${FZF_ALT_C_COMMAND//+([[:space:]])/ }
    export FZF_DEFAULT_COMMAND
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND

    _fzf_compgen_path() {
        eval "$FZF_DEFAULT_COMMAND"
    }
    # Use fd to generate the list for directory completion
    _fzf_compgen_dir() {
        eval "$FZF_ALT_C_COMMAND"
    }
fi
export LINES=100
export FZF_TMUX_HEIGHT=60%
                #   --style default \
                #   --tmux center,95%,80% \
FZF_DEFAULT_OPTS="--layout=reverse \
                  --inline-info \
                  --color=fg+:247 \
                  --multi \
                  "
FZF_DEFAULT_OPTS=${FZF_DEFAULT_OPTS//+([[:space:]])/ }
export FZF_DEFAULT_OPTS
# Use \ as the trigger sequence instead of the default **. Followed by a TAB
export FZF_COMPLETION_TRIGGER='*'
# Options to fzf command
export FZF_COMPLETION_OPTS='+c -x'

# For fzf-tab-completion vim plugin
bind -r "\\\t"
bind -x '"\\\t": fzf_bash_completion'
[ -d "$HOME/.vscode-server" ] && __set_vscode_code_path
