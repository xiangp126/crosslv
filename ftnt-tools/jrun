#!/bin/bash
# set -x

# Constants
SCRIPT_NAME=$(basename "$0")
USER_NOTATION="@@@@"
SEPARATOR_LT="=================================="
SEPARATOR_RT="=================================="

# Variables
fSessionId=
fWinId=1
fPaneId=1
fTmuxTarget=
fSendNewLine=
fCmdFile=
fTmuxPrefix="C-x"
fCleanedCmd=
# Flags for quick options
fWadDebug=
fKernelDebug=
fOutputDirectly=
fPacketTrace=
fPacketTraceAddr=
fIPSDebug=
fScanUnitDebug=
fDNSDebug=
fAutoCmdMode=

# Colors
RED='\033[31m'
MAGENTA='\033[35m'
LIGHTMAGENTA='\033[95m'
CYAN='\033[36m'
YELLOW='\033[33m'
LIGHTGREEN='\033[92m'
GREEN='\033[32m'
GREY='\033[90m'
RESET='\033[0m'
COLOR=$MAGENTA

logo() {
cat << _EOF
      _  ___   __  __ _  __
     (_)/ _ \ / / / // |/ /
    / // , _// /_/ //    /
 __/ //_/|_| \____//_/|_/
|___/
_EOF
}

# Define FortiGate debug commands as global array
declare -a fWadDebugCommands=(
    "diagnose debug reset"
    "diagnose wad debug enable all"
    "diagnose debug enable"
)

# Define output configuration commands
declare -a fOutputCommands=(
    "config system console"
    "set output standard"
    "end"
)

# Define kernel debug commands
declare -a fKernelDebugCommands=(
    "diagnose debug reset"
    "diagnose debug enable"
    "diagnose debug application kmiglogd -1"
)

# Define packet trace commands
declare -a fPacketTraceCommands=(
    "diag debug reset"
    "diag debug flow filter clear"
    "diag debug enable"
    "diag debug flow filter addr $fPacketTraceAddr"
    "diag debug flow show function-name enable"
    "diag debug flow show iprope enable"
    "diag debug flow trace start 100"
)

# Define IPS debug commands
declare -a fIPSDebugCommands=(
    "diagnose debug reset"
    "diag wad debug ips-filter all"
    "dia ips debug enable all"
    "diagnose wad debug enable all"
    "diagnose debug enable"
)

# Define scanunit debug commands
declare -a fScanUnitDebugCommands=(
    "diagnose debug reset"
    "diagnose sys scanunit debug all"
    "diagnose wad debug enable all"
    "diagnose debug enable"
)

# Define DNS debug commands
declare -a fDNSDebugCommands=(
    "diagnose debug reset"
    "diagnose debug application dnsproxy -1"
    "diagnose wad debug enable all"
    "diagnose debug enable"
)

usage() {
    cat << _EOF
Usage: $SCRIPT_NAME session[:window[.pane]] [OPTIONS]

Options:
    -h, --help               Print this help message
    -s, --session            Set session ID (default: $fSessionId)
    -w, --window             Set window ID (default: $fWinId)
    -p, --pane               Set pane ID (default: $fPaneId)
    -f, --file               Specify command file (default: $fCmdFile)
    -W, --wad-debug          Send WAD debug commands automatically
    -o, --output-directly    Configure console to output directly (no pagination)
    -k, --kernel-debug       Send kernel debug commands automatically
    -t, --packet-trace       Send packet trace commands automatically
    --packet-trace-addr      Set IP address for packet trace (default: $fPacketTraceAddr)
    -i, --ips-debug          Send IPS debug commands automatically
    -S, --scanunit-debug     Send scanunit debug commands automatically
    -D, --dns-debug          Send DNS debug commands automatically

Examples:
    $SCRIPT_NAME --session=log --window=2 --pane=2 --file=$HOME/commands.txt
    $SCRIPT_NAME log --wad-debug      # Uses default window $fWinId and pane $fPaneId
    $SCRIPT_NAME log:2 --wad-debug    # Uses default pane $fPaneId
    $SCRIPT_NAME log:2.3 --wad-debug  # Specifies all parts
    $SCRIPT_NAME log -t --packet-trace-addr=192.168.1.100

Tips:
    1. Type $fTmuxPrefix, then q to view the pane number within the tmux window.
    2. Type $fTmuxPrefix, then s to view the session name in tmux.
    3. Use // to comment out a line in the command file.
    4. Use ! to omit the rest of the commands in the command file.

_EOF
    exit 0
}

SHORTOPTS="hs:w:p:f:WoktiSD"
LONGOPTS="help,session:,window:,pane:,file:,wad-debug,output-directly,kernel-debug,packet-trace,ips-debug,scanunit-debug,dns-debug,packet-trace-addr:"
if ! PARSED=$(getopt --options=$SHORTOPTS --longoptions=$LONGOPTS --name "$SCRIPT_NAME" -- "$@"); then
    echo -e "${MAGENTA}Failed to parse arguments.${RESET}" >&2
    exit 1
fi

eval set -- "$PARSED"
unset PARSED

while true; do
    case "$1" in
        -h|--help)
            usage
            ;;
        -s|--session)
            fSessionId="$2"
            shift 2
            ;;
        -w|--window)
            fWinId="$2"
            shift 2
            ;;
        -p|--pane)
            fPaneId="$2"
            shift 2
            ;;
        -f|--file)
            fCmdFile="$2"
            shift 2
            ;;
        -W|--wad-debug)
            fWadDebug="true"
            shift
            ;;
        -o|--output-directly)
            fOutputDirectly="true"
            shift
            ;;
        -k|--kernel-debug)
            fKernelDebug="true"
            shift
            ;;
        -t|--packet-trace)
            fPacketTrace="true"
            shift
            ;;
        -i|--ips-debug)
            fIPSDebug="true"
            shift
            ;;
        -S|--scanunit-debug)
            fScanUnitDebug="true"
            shift
            ;;
        -D|--dns-debug)
            fDNSDebug="true"
            shift
            ;;
        --packet-trace-addr)
            fPacketTraceAddr="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo -e "$USER_NOTATION ${MAGENTA}Invalid option: $1${RESET}"
            exit 1
            ;;
    esac
done

if [ "$#" == 0 ]; then
    usage
elif [ "$#" == 1 ]; then
    target="$1"
    if [[ "$target" =~ ^([^:]+)(:([0-9]+)(\.([0-9]+))?)?$ ]]; then
        fSessionId="${BASH_REMATCH[1]}"
        fWinId="${BASH_REMATCH[3]:-$fWinId}"
        fPaneId="${BASH_REMATCH[5]:-$fPaneId}"
    else
        echo -e "$USER_NOTATION ${MAGENTA}Invalid tmux target format. Use: session[:window[.pane]]${RESET}" >&2
        exit 1
    fi
else
    echo -e "$USER_NOTATION ${MAGENTA}Too many arguments.${RESET}"
    exit 1
fi

[ -z "$fSessionId" ] && echo -e "$USER_NOTATION ${MAGENTA}Session ID is required.${RESET}" && exit 1
fTmuxTarget="$fSessionId:$fWinId.$fPaneId"

logo
echo $SEPARATOR_LT
echo -e "[s] Set Session ID to: ${COLOR}$fSessionId${RESET}"
echo -e "[w] Set Window ID to: ${COLOR}$fWinId${RESET}"
echo -e "[p] Set Pane ID to: ${COLOR}$fPaneId${RESET}"
echo -e "[\] Set Tmux Target to: ${COLOR}$fTmuxTarget${RESET}"
COLOR=$GREY
[ -n "$fWadDebug" ]      && fAutoCmdMode="true" && echo -e "[W] ${COLOR}Sending WAD debug commands${RESET}"
[ -n "$fOutputDirectly" ]&& fAutoCmdMode="true" && echo -e "[o] ${COLOR}Configuring console for direct output${RESET}"
[ -n "$fKernelDebug" ]   && fAutoCmdMode="true" && echo -e "[k] ${COLOR}Sending kernel debug commands${RESET}"
[ -n "$fIPSDebug" ]      && fAutoCmdMode="true" && echo -e "[i] ${COLOR}Sending IPS debug commands${RESET}"
[ -n "$fScanUnitDebug" ] && fAutoCmdMode="true" && echo -e "[S] ${COLOR}Sending scanunit debug commands${RESET}"
[ -n "$fDNSDebug" ]      && fAutoCmdMode="true" && echo -e "[D] ${COLOR}Sending DNS debug commands${RESET}"
COLOR=$MAGENTA
if [[ -n "$fPacketTrace" ]]; then
    if [[ -z "$fPacketTraceAddr" ]]; then
        echo -e "$USER_NOTATION ${MAGENTA}Packet trace address is required.${RESET}"
        exit 1
    fi
    fAutoCmdMode="true"
    echo -e "[t] Sending packet trace commands for IP: ${COLOR}$fPacketTraceAddr${RESET}"
fi
if [[ -z "$fAutoCmdMode" ]]; then
    if [[ ! -f "$fCmdFile" ]]; then
        echo -e "$USER_NOTATION ${MAGENTA}Command file not found.${RESET}"
        exit 1
    fi
    echo -e "[f] Set command file to: ${COLOR}$fCmdFile${RESET}"
fi
echo $SEPARATOR_RT

sendDebugCmds() {
    local -n commands=$1
    for cmd in "${commands[@]}"; do
        echo -e "$USER_NOTATION Sending: ${LIGHTGREEN}$cmd${RESET}"
        tmux send-keys -t "$fTmuxTarget" -l "$cmd"
        tmux send-keys -t "$fTmuxTarget" Enter

        if [[ $? -ne 0 ]]; then
            echo -e "$USER_NOTATION ${MAGENTA}Failed to send command: $cmd${RESET}"
            exit 1
        fi
        sleep 0.5
    done
}

[ -n "$fWadDebug" ]       && sendDebugCmds fWadDebugCommands      && exit 0
[ -n "$fOutputDirectly" ] && sendDebugCmds fOutputCommands        && exit 0
[ -n "$fKernelDebug" ]    && sendDebugCmds fKernelDebugCommands   && exit 0
[ -n "$fIPSDebug" ]       && sendDebugCmds fIPSDebugCommands      && exit 0
[ -n "$fScanUnitDebug" ]  && sendDebugCmds fScanUnitDebugCommands && exit 0
[ -n "$fDNSDebug" ]       && sendDebugCmds fDNSDebugCommands      && exit 0
[ -n "$fPacketTrace" ]    && sendDebugCmds fPacketTraceCommands   && exit 0

# Line Processing
tail -n +1 "$fCmdFile" | while IFS= read -r command || [[ -n "$command" ]]; do
    # Eliminates comments, deletes everything before : or #, and clears leading spaces
    fCleanedCmd=$(sed '/^[[:space:]]*\/\//d; s/.*[:#]//; s/^[[:space:]]*//' <<< "$command")

    [ -z "$fCleanedCmd" ] && continue

    # If the cleaned command starts with an exclamation mark
    [ "${fCleanedCmd:0:1}" == "!" ] && exit 0

    # For dos file, there will be a '\r\n' ending in each command. No need to send extra new line.
    if [[ "$fCleanedCmd" != *$'\r' ]]; then
        fSendNewLine="true"
    fi

    echo -e "$USER_NOTATION Sending: ${MAGENTA}$fCleanedCmd${RESET}"

    if [[ -n "$fSendNewLine" ]]; then
        # Use -l to send the command as a literal string
        tmux send-keys -t "$fTmuxTarget" -l "$fCleanedCmd"
        tmux send-keys -t "$fTmuxTarget" Enter
    else
        tmux send-keys -t "$fTmuxTarget" -l "$fCleanedCmd"
    fi

    if [[ $? -ne 0 ]]; then
        echo -e "$USER_NOTATION ${MAGENTA}Failed to send command: $fCleanedCmd${RESET}"
        exit 1
    fi
done
