#!/bin/bash

# Default values
QCOW2_DESCRIPTION="FortiGate VM"
QCOW2_RAM="2048"  # in MB
QCOW2_VCPUS="1"
QCOW2_NAME=
QCOW2_FILE_PATH=
QCOW2_VIRTUAL_SIZE=  # Will be populated from qcow2 file
QCOW2_VM_IP=
SCRIPT_NAME=$(basename "$0")
COLOR="\033[35m"
RESET="\033[0m"

# Color definitions
MAGENTA="\033[35m"
LIGHTYELLOW="\033[93m"
RESET="\033[0m"
COLOR=$MAGENTA

usage() {
    cat << _EOF
Usage: $SCRIPT_NAME [OPTIONS] <vm_name> <qcow2_path>

Create a QCOW2 VM using virt-install

Required Arguments:
  <vm_name>         Name for the new FortiGate VM.
  <qcow2_path>      Path to the FortiGate qcow2 disk image.

Options:
  -h, --help        Print this help message.
  -d, --debug       Enable debug output.
  -r, --ram MB      Set RAM size in MB (default: $QCOW2_RAM).
  -c, --vcpus NUM   Set number of vCPUs (default: $QCOW2_VCPUS).
  -p, --desp DESC   Set VM description (default: "$QCOW2_DESCRIPTION").

Example: $SCRIPT_NAME fgt1 /vms/fortios.qcow2
         $SCRIPT_NAME --ram 4096 --vcpus 2 fgt5 /data/images/fortios.qcow2

_EOF
    exit 1
}

parseOptions() {
    # Define short and long options
    SHORTOPTS="hdr:c:"
    LONGOPTS="help,ram:,vcpus:,desp:,debug"

    # Use getopt to parse command-line options
    # Note: Adding -- after options separates them from positional arguments.
    if ! PARSED=$(getopt --options $SHORTOPTS --longoptions "$LONGOPTS" --name "$0" -- "$@"); then
        echo -e "${COLOR}Error: Failed to parse command-line options.${RESET}" >&2
        usage
    fi

    # Reset positional parameters to the parsed values
    eval set -- "$PARSED"

    # Parse options
    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            -d|--debug)
                set -x
                shift
                ;;
            -r|--ram)
                QCOW2_RAM="$2"
                shift 2
                ;;
            -c|--vcpus)
                QCOW2_VCPUS="$2"
                shift 2
                ;;
            --desp)
                QCOW2_DESCRIPTION="$2"
                shift 2
                ;;
            --)
                shift
                break # End of options
                ;;
            *)
                echo "Error: Invalid option processing."
                exit 3
                ;;
        esac
    done

    if [ $# -lt 2 ]; then
        echo -e "${COLOR}Error: Missing required arguments.${RESET}"
        usage
    fi
    QCOW2_NAME="$1"
    QCOW2_FILE_PATH="$2"

    if [ ! -f "$QCOW2_FILE_PATH" ]; then
        echo -e "${COLOR}Error: File '$QCOW2_FILE_PATH' does not exist.${RESET}"
        exit 1
    fi
}

getVirtualDiskSize() {
    local qcow2Path="$QCOW2_FILE_PATH"
    local virtualSize

    if ! command -v qemu-img &> /dev/null; then
        echo "Error: qemu-img command not found. Please install qemu-utils package." >&2
        exit 1
    fi

    # Get virtual size from qcow2 file (in bytes)
    # virtual size: 2 GiB (2147483648 bytes)
    pattern='\(([0-9]+)\ bytes\)'
    virtualSize=$(qemu-img info "$qcow2Path" | grep -E 'virtual size' | while read -r line; do
        if [[ $line =~ $pattern ]]; then
            echo "${BASH_REMATCH[1]}"
            break
        fi
    done)

    if [ -z "$virtualSize" ]; then
        echo -e "${COLOR}Error: Failed to get virtual disk size.${RESET}"
        exit 1
    fi

    local gbSize=$(( virtualSize / 1073741824 ))
    local mbSize=$(( (virtualSize % 1073741824) / 1048576 ))

    if [ "$gbSize" -gt 0 ] && [ "$mbSize" -gt 0 ]; then
        QCOW2_VIRTUAL_SIZE="$gbSize GB $mbSize MB"
    elif [ "$gbSize" -gt 0 ]; then
        QCOW2_VIRTUAL_SIZE="$gbSize GB"
    else
        QCOW2_VIRTUAL_SIZE="$mbSize MB"
    fi
}

displayBanner() {
    echo "Attempting to create VM '$QCOW2_NAME' with the following settings:"
    echo "  Description:   $QCOW2_DESCRIPTION"
    echo "  RAM:           $QCOW2_RAM MB"
    echo "  vCPUs:         $QCOW2_VCPUS"
    echo "  Virtual Size:  $QCOW2_VIRTUAL_SIZE"
    echo "  Qcow2 Path:    $QCOW2_FILE_PATH"
    echo "---"
}

createVM() {
    # Explanation of --import option:
    # --import performs the following:
    #
    # 1. Bypass Installation Phase: Without --import, virt-install would start a VM and wait for you
    #    to go through a normal OS installation process (partitioning, package selection, etc.)
    # 2. Disk Image Handling: With --import, the command treats your qcow2 file ($QCOW2_QCOW2_PATH)
    #    as a ready-to-boot disk image containing all necessary OS components
    # 3. Boot Sequence: It modifies the boot sequence to directly boot from the hard drive
    #    instead of looking for installation media
    # 4. No Installation Source Required: You don't need to specify --location or --cdrom parameters
    #    that would normally point to installation media
    #
    # Note:
    # When using --import, the disk size specified within --disk is ignored.
    # The VM will use the pre-defined size from the qcow2 image itself.
    # Use the following command to check the size of the qcow2 image:
    # $ qemu-img info fortios.qcow2
    # image: fortios.qcow2
    # file format: qcow2
    # virtual size: 2 GiB (2147483648 bytes)
    # disk size: 75.3 MiB
    # cluster_size: 65536
    # Format specific information:
    #     compat: 1.1
    #     lazy refcounts: false
    #     refcount bits: 16
    #     corrupt: false

    echo -e "${COLOR}Creating VM with virt-install, this may take a moment...${RESET}"
    # If current user is in libvirt group, then sudo is not needed
    sudo virt-install \
        --check path_in_use=on \
        --name="$QCOW2_NAME" \
        --description="$QCOW2_DESCRIPTION" \
        --ram="$QCOW2_RAM" \
        --vcpus="$QCOW2_VCPUS" \
        --disk "path=$QCOW2_FILE_PATH,format=qcow2,bus=virtio" \
        --import \
        --network network=default,model=virtio \
        --graphics none \
        --noautoconsole

    # Check the exit status of virt-install
    VIRT_INSTALL_STATUS=${PIPESTATUS[0]}
    if [ "$VIRT_INSTALL_STATUS" -eq 0 ]; then
        echo -e "${COLOR}VM '$QCOW2_NAME' has been installed successfully.${RESET}"

        # Check if VM is actually created and running
        if virsh dominfo "$QCOW2_NAME" &>/dev/null; then
            VM_STATUS=$(virsh domstate "$QCOW2_NAME")
            echo -e "${COLOR}VM Status: $VM_STATUS${RESET}"

            # Get IP address if VM is running
            if [ "$VM_STATUS" = "running" ]; then
                echo -e "${COLOR}Waiting for VM to get an IP address (may take a minute)...${RESET}"
                for _ in {1..24}; do
                    QCOW2_VM_IP=$(virsh domifaddr "$QCOW2_NAME" 2>/dev/null | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -1)
                    if [ -n "$QCOW2_VM_IP" ]; then
                        break
                    fi
                    sleep 2
                done
            fi
        fi
    else
        echo -e "${COLOR}Error: Failed to install FortiGate VM. Exit code: $VIRT_INSTALL_STATUS${RESET}"
        exit 1
    fi
}

summary() {
    # Provide connection instructions
    echo -e "FortiGate VM '$QCOW2_NAME' creation attempt finished. Check virt-manager or 'virsh list --all'."
    echo -e "-------------------------------------------------------"
    echo -e "To connect to the VM console: ${COLOR}virsh console $QCOW2_NAME${RESET}"
    echo -e "VM IP Address: ${LIGHTYELLOW}$QCOW2_VM_IP${RESET}"
    echo -e "Name: ${COLOR}$QCOW2_NAME${RESET}"
    echo -e "Description: ${COLOR}$QCOW2_DESCRIPTION${RESET}"
    echo -e "RAM: ${COLOR}$QCOW2_RAM MB${RESET}"
    echo -e "vCPUs: ${COLOR}$QCOW2_VCPUS${RESET}"
    echo -e "Virtual Size: ${COLOR}$QCOW2_VIRTUAL_SIZE${RESET}"
    echo -e "Qcow2 Path: ${COLOR}${QCOW2_FILE_PATH// /\\ }${RESET}"
    echo -e "-------------------------------------------------------"
}

main() {
    parseOptions "$@"
    getVirtualDiskSize
    displayBanner
    createVM
    summary
}

main "$@"
