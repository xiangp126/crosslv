#!/bin/bash
# set -x

# Build flags & Options
FTNTBUILDTARGET="image.out"
fPoundPattern='#\s*$'
ftntUser=
ftntPasswd=
fRebuildKernel=
fPlatform="FOS" # Default platform
fBuildTarget="$FTNTBUILDTARGET"
fBuildModel=
fNumOfJobs=$(nproc)
fWorkingDir=$(pwd)
fMaxBuildAttempt=2
fGenerateCompileCmds=
fUseBear=
fRunConfigure=
fNeedBuild=
fPrintBuildFlags= # Print build flags
fGitClean=
fEnableOptimization=
fAddressSanitizer= # AddressSanitizer (ASan), a powerful memory error detection tool.
fInputCmd=
fBuildTimeFormatted=
# Sync Options
fSyncTarget=
fSyncFile=$fBuildTarget
fSyncPort=22
fSyncUsername="admin"
fSyncPassword="password"
# Git associated variables
fCompileCommandsJson="compile_commands.json"
fRMCompileCommandsJson=
# Common Constants
SEPARATOR="==================================================="
SCRIPT_NAME=$(basename $0)
USER_NOTATION="@@@@"
# Colors
CYAN='\033[36m'
RED='\033[31m'
BOLD='\033[1m'
GREEN='\033[32m'
MAGENTA='\033[35m'
BLUE='\033[34m'
GREY='\033[90m'
LIGHTYELLOW='\033[93m'
LIGHTGREEN='\033[92m'
# YELLOW='\033[33m'
RESET='\033[0m'
COLOR=$MAGENTA

# https://patorjk.com/software/taag/
showLogo() {
    cat << _EOF
      _              __
     (_)__ _  ___ _ / /__ ___
    / //  ' \/ _ '//  '_// -_)
 __/ //_/_/_/\_,_//_/\_\ \__/
|___/
_EOF
}

usage() {
    cat << _EOF
Usage: $SCRIPT_NAME [OPTIONS]

Build Flags:
    -D, --debug                 Enable debug mode
    -c, --clean                 Clean the repo (default: ${fGitClean:-false})
        --clean-removal         Remove $fCompileCommandsJson in clean command (default: ${fRMCompileCommandsJson:-false})
    -C, --configure             Run Configure intelligently (default: ${fRunConfigure:-false})
    -o, --build                 Run build commands (set automatically if any of the [bmjwT] options is set)
    -O, --optimization          Enable optimization (default: ${fEnableOptimization:-false})
    -S, --address-sanitizer     Enable/Disable -fsanitize=address when compiling (default: ${fAddressSanitizer:-false})

Build Options:
    --bear                      Use Bear to generate compile_commands.json
    -m, --model                 Set the build model (default: ${fBuildModel:-KVM})
    -j, --jobs                  Set the number of jobs (default: $fNumOfJobs)
    -w, --working-dir           Set working directory  (default: $fWorkingDir)
    -k, --kernel                Rebuild the kernel (default: ${fRebuildKernel:-false})
    --max-build-attempt         Set the maximum number of build attempts (default: $fMaxBuildAttempt)
    -B, --build-target          Set the build target (default: $fBuildTarget)

Sync Options:
    -t, --target                Set the sync target machine
    -s, --sync-file             Set the sync source file (default: $fSyncFile)
    -P, --sync_port             Set the sync ssh port (default: $fSyncPort)
    -l/-u, --username           Set the sync username (default: $fSyncUsername)
    -p, --password              Set the sync password (default: $fSyncPassword)

Other Options:
    -h, --help                  Print this help message

Example:
    $SCRIPT_NAME -m FGT_VM64_KVM -c -T1 -j4 -b
    $SCRIPT_NAME -m VMWARE
    $SCRIPT_NAME -t fgt1 -s FGT_VM64_KVM-v7-build1662.out -l "admin" -p "password" -P 22
    $SCRIPT_NAME -h

_EOF
    exit 0
}

[[ $# -eq 0 ]] && usage
fInputCmd="$SCRIPT_NAME $*"

SHORTOPTS="hcCoOm:j:w:kB:s:t:P:u:l:p:DS:"
LONGOPTS="help,clean,debug,bear,configure,build,optimization,clean-removal,model:,working-dir:,jobs:,kernel,max-build-attempt:,build-target:,\
sync-file:,sync_port:,target:,username:,password:,address-sanitizer:"
# getopt is a command that standardizes and validates command-line arguments.
# It takes the messy input arguments and converts them into a standardized format.
# CLI Input: jmake TEST --model=VMWARE -j 8 --optimization
# getopt will convert it into:  --model 'VMWARE' -j '8' --optimization -- 'TEST'
if ! PARSED=$(getopt --options $SHORTOPTS --longoptions $LONGOPTS --name "$0" -- "$@"); then
    echo -e "${MAGENTA}Error: Failed to parse command-line options.${RESET}" >&2
    exit 1
fi

# Reset positional parameters to the parsed values
eval set -- "$PARSED"

# for ((i=1; i<=$#; i++)); do
#     echo "\$$i = ${!i}"
# done
# $1 = --model
# $2 = VMWARE
# $3 = -j
# $4 = 8
# $5 = --optimization
# $6 = --
# $7 = TEST

while true; do
    case "$1" in
        -h|--help)
            usage
            shift
            ;;
        -d|--debug)
            set -x
            shift
            ;;
        -m|--model)
            fBuildModel="$2"
            fNeedBuild=true
            shift 2
            ;;
        -w|--working-dir)
            fWorkingDir="$2"
            fNeedBuild=true
            shift 2
            ;;
        -j|--jobs)
            fNumOfJobs="$2"
            fNeedBuild=true
            shift 2
            ;;
        --max-build-attempt)
            fMaxBuildAttempt="$2"
            fNeedBuild=true
            shift 2
            ;;
        -k|--kernel)
            fRebuildKernel=true
            fNeedBuild=true
            shift
            ;;
        -o|--build)
            fNeedBuild=true
            shift
            ;;
        -O|--optimization)
            fEnableOptimization=true
            fNeedBuild=true
            shift
            ;;
        -S|--address-sanitizer)
            case "$2" in
                yes|y)
                    fAddressSanitizer="y"
                    ;;
                no|n)
                    fAddressSanitizer="n"
                    ;;
                *)
                    echo -e "${MAGENTA}Error: Invalid value for --address-sanitizer option: $2${RESET}" >&2;
                    exit 1
                    ;;
            esac
            fNeedBuild=true
            shift 2
            ;;
        -B|--build-target)
            fBuildTarget="$2"
            fNeedBuild=true
            shift 2
            ;;
        -C|--configure)
            fRunConfigure=true
            shift
            ;;
        -c|--clean)
            fGitClean=true
            shift
            ;;
        --clean-removal)
            fGitClean=true
            fRMCompileCommandsJson=true
            shift
            ;;
        -t|--target)
            fSyncTarget="$2"
            shift 2
            ;;
        --bear)
            fGenerateCompileCmds=true
            fRMCompileCommandsJson=true
            fGitClean=true
            fNeedBuild=true
            fUseBear=true
            shift
            ;;
        -s|--sync-file)
            fSyncFile="$2"
            shift 2
            ;;
        -P|--sync_port)
            fSyncPort="$2"
            shift 2
            ;;
        -l|-u|--username)
            fSyncUsername="$2"
            shift 2
            ;;
        -p|--password)
            fSyncPassword="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo -e "$USER_NOTATION ${MAGENTA}Invalid option: $1${RESET}"
            exit 1
            ;;
    esac
done

if [[ $# -gt 0 ]]; then
    echo -e "$USER_NOTATION ${COLOR}Illegal non-option arguments: $@${RESET}"
    exit 1
fi

getCurrentTime() {
    COLOR="$RED"
    echo -e "${COLOR}$(date +"%m/%d/%Y %H:%M:%S")${RESET}"
}

checkCmdAvailability() {
    if ! command -v "$1" &> /dev/null; then
        echo -e "$USER_NOTATION ${RED}Error: Command $1 not found.${RESET}"
        exit 1
    fi
}

# $1: available models, $2: target model
searchBuildModel() {
    matchedModels=()
    local availModels="$1"
    local targetModel="$2"

    # Collect exact and partial matched models
    for model in $availModels; do
        if [[ "$model" == *"$targetModel"* ]]; then
            matchedModels+=("$model")
            if [[ "$model" == "$targetModel" ]]; then
                fBuildModel="$model"
                # return
            fi
        fi
    done

    COLOR="$RED"
    case ${#matchedModels[@]} in
        0)
            echo -e "$USER_NOTATION No matched model found for ${COLOR}$targetModel${RESET}"
            exit 1
            ;;
        1)
            fBuildModel="${matchedModels[0]}"
            ;;
        *)
            echo "$USER_NOTATION Multiple matched models found for $targetModel"
            echo "$USER_NOTATION Please specify the model from the following list:"
            for model in "${matchedModels[@]}"; do
                echo -e "${COLOR}$model${RESET}"
            done
            exit 1
            ;;
    esac
}

preConfigure() {
    # Set fRunConfigure to true if $fNeedBuild is true
    [ -n "$fNeedBuild" ] && fRunConfigure=true
    [ -n "$fGitClean" ] || [ -n "$fRunConfigure" ] || [ -n "$fNeedBuild" ] || [ -n "$fGenerateCompileCmds" ] || [ -n "$fRMCompileCommandsJson" ] && fPrintBuildFlags=true
    [ -z "$fPrintBuildFlags" ] && return

    fWorkingDir=$(realpath "$fWorkingDir")
    cd "$fWorkingDir" || exit 1

    checkCmdAvailability "./Configure"
    availModels="$(./Configure list)"
    for model in $availModels; do
        if [[ "$model" == "FPX"* ]]; then
            fPlatform="FPX"
            break
        fi
    done

    # Upper case the build model
    fBuildModel=$(echo "$fBuildModel" | tr '[:lower:]' '[:upper:]')

    if [[ "$fPlatform" == "FPX" ]]; then
        if [ -z "$fBuildModel" ]; then
            fBuildModel="FPX_KVM"
        else
            searchBuildModel "$availModels" "$fBuildModel"
        fi
    else
        # The platform is FOS
        if [ -z "$fBuildModel" ]; then
            fBuildModel="FGT_VM64_KVM"
        elif [[ "$fBuildModel" == "VMWARE" ]]; then
            fBuildModel="FGT_VM64"
        else
            searchBuildModel "$availModels" "$fBuildModel"
        fi
    fi
}

printBuildFlags() {
    echo $SEPARATOR
    # Print the build flags
    if [ -n "$fPrintBuildFlags" ]; then
        COLOR="$GREEN"
        echo -e "${BOLD}Build Flags:${RESET}"
        [ -n "$fGitClean" ]              && echo -e "[c] ${COLOR}Clean${RESET} the repo"
        [ -n "$fRunConfigure" ]          && echo -e "[C] ${COLOR}Configure${RESET} the project"
        [ -n "$fNeedBuild" ]             && echo -e "[o] ${COLOR}Build${RESET} the project"
        [ -n "$fRebuildKernel" ]         && echo -e "[k] ${COLOR}Kernel${RESET} rebuild"
        [ -n "$fRMCompileCommandsJson" ] && echo -e "[/] ${COLOR}Remove${RESET} the existing $fCompileCommandsJson"
        [ -n "$fGenerateCompileCmds" ]   && echo -e "[g] ${COLOR}Generate${RESET} compile_commands.json"
        [ -n "$fEnableOptimization" ]    && echo -e "[O] ${COLOR}Optimization${RESET} enabled" \
                                         || echo -e "[O] ${COLOR}Optimization${RESET} disabled"
        [ "$fAddressSanitizer" == "y" ]  && echo -e "[A] ${COLOR}AddressSanitizer${RESET} enabled" \
                                         || echo -e "[A] ${COLOR}AddressSanitizer${RESET} disabled"
    fi

    # Print the build options
    if [ -n "$fNeedBuild" ]; then
        echo -e "${BOLD}Build Optioins:${RESET}"
        COLOR="$RED"
        echo -e "[m] Build Modle:  ${COLOR}$fBuildModel${RESET}"
        COLOR="$CYAN"
        echo -e "[B] Build Target: ${COLOR}$fBuildTarget${RESET}"
        echo -e "[w] Build Directory: ${COLOR}$fWorkingDir${RESET}"
        echo -e "[T] Maximum Build Attempts: ${COLOR}$fMaxBuildAttempt${RESET}"
        echo -e "[j] Concurrent Build Jobs:  ${COLOR}$fNumOfJobs${RESET}"
    fi

    if [ -n "$fSyncTarget" ]; then
        COLOR="$RED"
        echo -e "${BOLD}Sync Optioins:${RESET}"
        echo -e "[/] Scheduled to sync ${COLOR}$fSyncFile${RESET} to ${COLOR}$fSyncTarget${RESET}"
        echo -e "[l] Username: (${COLOR}$fSyncUsername${RESET})"
        echo -e "[p] Password: (${COLOR}$fSyncPassword${RESET})"
        echo -e "[s] Sync File:   (${COLOR}$fSyncFile${RESET})"
        echo -e "[t] Sync Target: (${COLOR}$fSyncTarget${RESET})"
    fi
    echo "$SEPARATOR"
    echo -en "${BOLD}Input Command: ${RESET}" >&2
    echo -e "${LIGHTYELLOW}$fInputCmd${RESET}" >&2
}

cleanTheRepo() {
    [ -z "$fGitClean" ] && return
    cd "$fWorkingDir" || exit
    echo "$USER_NOTATION Cleaning the working directory ..."

    local gitCleanCmd=
    # .cache will match both the .cache and .cache/ directories
    # .cache/ will only match the .cache/ directory
    # .cache/* will match all files and directories under .cache/
    declare -a gitExcludePatterns=(
        "\*.code-workspace"
        ".cache/"
        ".clang-format"
        ".clang-tidy"
    )
    [ -z "$fRMCompileCommandsJson" ] && gitExcludePatterns+=("$fCompileCommandsJson")
    for patt in "${gitExcludePatterns[@]}"; do
        echo -e "$USER_NOTATION Exclude ${COLOR}$patt${RESET}"
        gitExclude+="--exclude=$patt "
    done

    gitCleanCmd="git clean -xdf ${gitExclude}"
    echo -e "$USER_NOTATION Running: ${BLUE}$gitCleanCmd${RESET}"

    sleep 1
    COLOR=$MAGENTA
    eval "$gitCleanCmd"
    if [[ $? -ne 0 ]]; then
        echo -e "$USER_NOTATION ${COLOR}There seems to be some errors during the clean process${RESET}"
        echo -e "$USER_NOTATION ${NORMAL}But going on anyway${RESET}"
    else
        echo -e "$USER_NOTATION ${COLOR}Cleaned the working directory successfully.${RESET}"
    fi
}

runConfigure() {
    if [[ -z "$fRunConfigure" ]]; then
        return
    fi

    checkCmdAvailability "expect"
    checkCmdAvailability "get_credentials"

    if ! credentials_output=$(eval get_credentials); then
        echo -e "$USER_NOTATION ${RED}Error: Failed to get credentials.${RESET}"
        exit 1
    fi

    mapfile -t credentials <<< "$credentials_output"
    ftntUser=${credentials[0]}
    ftntPasswd=${credentials[1]}
    if [[ -z "$ftntUser" || -z "$ftntPasswd" ]]; then
        echo -e "$USER_NOTATION ${RED}Error: Failed to get credentials.${RESET}"
        exit 1
    fi

    # OPTIONS
    #        -h                Usage
    #        -z                Usage, with advanced options
    #        -m model_name     Specify model name
    #        -d y/n/ccy/cg/p/d Build debug version, release version, code coverage,
    #                          callgrind-enabled version, perf-enabled version, read-only-demo version?
    #        -c                Build code coverage image
    #        -f y/n            Install /fortidev symlink
    #        -O                Turn off compiler optimization
    #        -S                Enable -fsanitize=address when compiling.
    COLOR=$BLUE
    local configParams="-m $fBuildModel -d y -c"
    local sanitizerFlags=
    [ -z "$fEnableOptimization" ] && configParams+=" -O" # Flag for optimization
    [ "$fPlatform" == "FPX" ] && sanitizerFlags=" -S n"  # Flag for AddressSanitizer
    [ -n "$fAddressSanitizer" ] && sanitizerFlags=" -S $fAddressSanitizer" # Flag for AddressSanitizer
    [ -n "$sanitizerFlags" ] && configParams+="$sanitizerFlags" # The ultimate Configure params

    CONFIGURE_CMD="./Configure $configParams"
    echo -e "$USER_NOTATION Running Configure: ${COLOR}$CONFIGURE_CMD${RESET}"
    COLOR=$MAGENTA
    echo -e "$USER_NOTATION ${COLOR}Spawning a new bash session${RESET}"
    sleep 1

    # expect -d -c "
    expect -c "
        set config_bash_prompt \"$ \"

        log_user 1
        # exp_internal 1
        spawn -noecho bash

        expect \"\$config_bash_prompt\"
        send \"cd $fWorkingDir\r\"
        expect \"\$config_bash_prompt\"
        send \"$CONFIGURE_CMD\r\"

        set timeout 300
        expect {
            {Username} {
                send \"$ftntUser\r\"
                exp_continue
            }
            {Password for '$ftntUser':} {
                send \"$ftntPasswd\r\"
                exp_continue
            }
            {Please select a region: van, ott, sjc:} {
                send \"van\r\"
                exp_continue
            }
            \"\$config_bash_prompt\" {
                # log_user 0
                # send \"exit\r\"
                send \"\x04\r\"
            }
            {\[Yn\]:} {
                send \"y\r\"
                exp_continue
            }
            {yes/no} {
                send \"yes\r\"
                exp_continue
            }
            timeout {
                puts stderr \"$USER_NOTATION Timeout. Action aborted.\n\"
                exit 1
            }
        }
    "

    COLOR=$MAGENTA
    if [[ $? -ne 0 ]]; then
        echo -e "$USER_NOTATION ${COLOR}Failed to run Configure.${RESET}"
        exit 1
    else
        echo -e "$USER_NOTATION ${COLOR}Configure completed successfully.${RESET}"
    fi
}

runBuildCommands() {
    [ -z $fNeedBuild ] && return
    cd "$fWorkingDir" || exit

    local plainMakeCommand="make -j$fNumOfJobs $fBuildTarget"
    if [ -n "$fRebuildKernel" ]; then
        plainMakeCommand="make kernel_only && $plainMakeCommand"
    fi
    local makeCommand="$plainMakeCommand"

    local currAttempt=1
    local maxAttempt=$fMaxBuildAttempt
    local buildStartTime buildEndTime
    while [[ $currAttempt -le $maxAttempt ]]; do
        # Prepare the make command
        if [ -n "$fGenerateCompileCmds" ]; then
            # Use Bear to generate compile_commands.json
            local pathOfBearLib=
            local wrapperCmd=
            if [ -n "$fUseBear" ] && [[ "$currAttempt" -eq 1 ]]; then
                wrapperCmd="/bin/bear"
                if [ ! -x "$wrapperCmd" ]; then
                    echo -e "$USER_NOTATION ${CYAN}Installing Bear...${RESET}"
                    sudo DEBIAN_FRONTEND=noninteractive apt install bear -y
                fi
                pathOfBearLib=$(find /usr/lib/ -name libexec.so | head -n 1)
                if [ -n "$pathOfBearLib" ]; then
                    wrapperCmd="$wrapperCmd --library $pathOfBearLib --"
                else
                    echo -e "$USER_NOTATION ${CYAN}Failed to find libexec.so.${RESET}"
                    exit 1
                fi
            else
                # Failback to use bear 2.4.3 and libear.so which is compiled by glibc.so.2.31
                if [ ! -x "$HOME/.usr/bin/bear" ]; then
                    echo -e "$USER_NOTATION ${CYAN}Failed to find $HOME/.usr/bin/bear...${RESET}"
                    exit 1
                fi
                pathOfBearLib="$HOME/.usr/lib/libear.so"
                if [ ! -f "$pathOfBearLib" ]; then
                    echo -e "$USER_NOTATION ${CYAN}Failed to find $pathOfBearLib...${RESET}"
                    exit 1
                fi
                wrapperCmd="$HOME/.usr/bin/bear --libear $pathOfBearLib"
            fi
            makeCommand="$wrapperCmd $plainMakeCommand"
        fi

        # Loop to build the projects
        buildStartTime=$(date +%s)
        COLOR="$GREEN"
        echo -e "$USER_NOTATION Running build commands: ${LIGHTYELLOW}$makeCommand${RESET}"
        echo -e "$USER_NOTATION ${COLOR}Build attempt $currAttempt/$maxAttempt${RESET}"
        sleep 2

        eval "$makeCommand"
        eval_status=$?

        if [[ $eval_status -eq 0 ]]; then
            break
        else
            currAttempt=$((currAttempt + 1))
        fi
    done
    buildEndTime=$(date +%s)

    if [[ $eval_status -ne 0 ]]; then
        COLOR="$MAGENTA"
        echo -e "$USER_NOTATION ${COLOR}Build projects failed.${RESET}"
        echo -e "$USER_NOTATION ${CYAN}Search for error: to find the error message.${RESET}"
        exit 1
    fi

    local buildTime=$((buildEndTime - buildStartTime))
    local hours=$((buildTime / 3600))
    local minutes=$((buildTime % 3600 / 60))
    local seconds=$((buildTime % 60))
    fBuildTimeFormatted="${seconds}s"

    if [[ $minutes -gt 0 ]]; then
        fBuildTimeFormatted="${minutes}m${fBuildTimeFormatted}"
    fi

    if [[ $hours -gt 0 ]]; then
        fBuildTimeFormatted="${hours}h${fBuildTimeFormatted}"
    fi

    echo "$USER_NOTATION Congratulations! You have built projects successfully at $(getCurrentTime) for $fBuildTimeFormatted"
}

rmWriteFromJson() {
    [ -z $fNeedBuild ] && return

    COLOR=$MAGENTA
    local jsonFile=$fCompileCommandsJson
    local jsonPath=$fWorkingDir/$jsonFile
    # Remove the write privilege of compile_commands.json if it is writable
    if [[ -f "$jsonPath" ]]; then
        if [[ -w "$jsonPath" ]]; then
            echo -e "$USER_NOTATION ${COLOR}$jsonPath is writable${RESET}"
            echo -e "$USER_NOTATION ${COLOR}Remove the write privilege of $jsonPath${RESET}"
            chmod -w "$jsonPath"
            if [[ $? -ne 0 ]]; then
                echo -e "$USER_NOTATION ${COLOR}Failed to remove the write privilege of $jsonPath${RESET}"
                exit 1
            fi
        else
            echo -e "$USER_NOTATION ${COLOR}$jsonPath is read-only${RESET}"
        fi
    else
        echo -e "$USER_NOTATION ${COLOR}No $jsonFile found in $fWorkingDir${RESET}"
        if [ -n "$fGenerateCompileCmds" ]; then
            echo -e "$USER_NOTATION ${COLOR}Please check the generate compile command${RESET}"
            exit 1
        fi
    fi
}

runSyncCommands() {
    if [[ -z "$fSyncTarget" ]]; then
        return
    fi

    if ! ping -c 1 -W 1 "$fSyncTarget" &> /dev/null; then
        echo -e "$USER_NOTATION ${MAGENTA}Host $fSyncTarget not reachable${RESET}"
        exit 1
    fi

    local loginTool="jssh"
    checkCmdAvailability "$loginTool"

    local syncFile=
    local syncFiles=()
    if [[ "$fSyncFile" == */* ]]; then
        if [[ -f "$fSyncFile" ]]; then
            syncFile="$fSyncFile"
        else
            echo -e "$USER_NOTATION ${MAGENTA}$fSyncFile not found at path: $fSyncFile${RESET}"
            exit 1
        fi
    else
        # Otherwise, search for the file in the working directory
        # The -t option tells mapfile to strip the trailing newlines from each line it reads.
        mapfile -t syncFiles < <(find "$fWorkingDir" -name "$fSyncFile")
        if [[ ${#syncFiles[@]} -eq 0 ]]; then
            echo -e "$USER_NOTATION ${MAGENTA}$fSyncFile not found in $fWorkingDir${RESET}"
            exit 1
        fi
        # Only sync the first file that is found.
        syncFile="${syncFiles[0]}"
    fi

    COLOR="$BLUE"
    echo '----------------------------------------------------'
    echo -e "$USER_NOTATION Syncing ${COLOR}$syncFile${RESET} to ${COLOR}$fSyncTarget${RESET} ..."

    maxSyncRetries=3
    ESUCCESS=0
    EMAXTRIES=$(($maxSyncRetries + 1))    # 4
    ETIMEOUT=$(($maxSyncRetries + 2))     # 5
    EFAILED=$(($maxSyncRetries + 3))      # 6
    EPERMDENIED=$(($maxSyncRetries + 4))  # 7
    # If not use escape for $i, it will be replaced by the value of $i, since it is in the bash environment.
    # But \$i will keep as $i in the expect script generated.
    # expect -d -c "
    expect -c "
        # Set the initial values
        set defaultTimeout 1200
        set adjustTimeout 0
        set waitBeforeRetry 10
        set passwd_prompt_cnt 0

        set RESET       \"\033\[0m\"
        set BOLD        \"\033\[1m\"
        set RED         \"\033\[31m\"
        set GREEN       \"\033\[32m\"
        set LIGHTGREEN  \"\033\[92m\"
        set YELLOW      \"\033\[33m\"
        set LIGHTYELLOW \"\033\[93m\"
        set BLUE        \"\033\[34m\"
        set MAGENTA     \"\033\[35m\"
        set CYAN        \"\033\[36m\"
        set GREY        \"\033\[90m\"
        set COLOR       \$MAGENTA

        # Loop to sync the file
        for {set i 1} {\$i <= $maxSyncRetries} {incr i} {
            puts stderr \"$USER_NOTATION Sync attempt \${COLOR}\$i/$maxSyncRetries\${RESET}\"
            spawn -noecho scp -P $fSyncPort $syncFile ${fSyncUsername}@${fSyncTarget}:/fgt-image
            if {\$adjustTimeout != 0} {
                set timeout \$adjustTimeout
            } else {
                set timeout \$defaultTimeout
            }

            expect {
                \"bad port\" {
                    puts stderr \"$USER_NOTATION Bad port. Connecting aborted.\"
                    exit $EFAILED
                }
                {yes/no} {
                    send \"yes\r\"
                    exp_continue
                }
                -nocase {Password:} {
                    incr passwd_prompt_cnt
                    if {\$passwd_prompt_cnt > 1} {
                        puts stderr \"\n$USER_NOTATION Permission Denied. Please specify the login credentials.\"
                        exit $EFAILED
                    }
                    send \"$fSyncPassword\r\"
                    exp_continue
                }
                \"Host key verification failed.\" {
                    set COLOR \$LIGHTYELLOW
                    puts stderr \"$USER_NOTATION \${COLOR}Host key verification failed. Updating known_hosts ...\${RESET}\"
                    puts stderr \"$USER_NOTATION \${COLOR}ssh-keygen -R $fSyncTarget\${RESET}\"
                    system \"ssh-keygen -R $fSyncTarget\"
                    puts stderr \"$USER_NOTATION \${COLOR}Host key removed from known_hosts file.\${RESET}\n\"
                    puts stderr \"$USER_NOTATION Retrying SCP immediately...\"
                    set COLOR \$MAGENTA
                    continue
                }
                -re {Connection refused|No route to host} {
                    set adjustTimeout -1
                    puts stderr \"$USER_NOTATION Waiting for \$waitBeforeRetry seconds before retrying ...\"
                    sleep \$waitBeforeRetry
                    # Exponential backoff
                    set waitBeforeRetry [expr {\$waitBeforeRetry * 2}]
                    continue
                }
                \"501-Permission Denied\" {
                    puts stderr \"$USER_NOTATION Permission Denied. Please enable \${COLOR}admin-scp\${RESET} under \${COLOR}config system global\${RESET}\"
                    exit $EPERMDENIED
                }
                \"check image error\" {
                    puts stderr \"$USER_NOTATION Check image error. Action aborted.\"
                    puts stderr \"$USER_NOTATION Please check if the model of the image matches the target machine.\"
                    exit $EFAILED
                }
                \"100-update image completed\" {
                    puts stderr \"$USER_NOTATION 100-update image completed. Action completed.\"
                    exit $ESUCCESS
                }
                \"lost connection\" {
                    puts stderr \"$USER_NOTATION Lost connection. Action aborted.\"
                    exit $EFAILED
                }
                timeout {
                    puts stderr \"$USER_NOTATION Timeout. Action aborted.\"
                    exit $ETIMEOUT
                }
                eof {
                    puts stderr \"$USER_NOTATION Reaching EOF.\"
                    exit $ESUCCESS
                }
            }
        }
        exit \$i
    "

    retValue=$?
    [[ $retValue -ne 0 ]] && echo "$USER_NOTATION Sync return value: $retValue"

    case $retValue in
        "$ESUCCESS")
            COLOR=$MAGENTA
            echo -e "$USER_NOTATION You have synced $fSyncFile to $fSyncTarget successfully at $(getCurrentTime)"
            if ! command -v $loginTool &> /dev/null; then
                echo -e "$USER_NOTATION ${COLOR}Login tool $loginTool not found${RESET}"
                exit 1
            fi

            echo -e "$USER_NOTATION Invoking ${LIGHTGREEN}$loginTool${RESET} to login to $fSyncTarget and wait for it to reboot"
            $loginTool -P "$fSyncPort" -l "$fSyncUsername" -p "$fSyncPassword" -t "$fSyncTarget"
            if [[ $? -ne 0 ]]; then
                echo "$USER_NOTATION $loginTool run failed. Please check the server status manually."
                exit 1
            else
                echo -ne "$USER_NOTATION Target ${MAGENTA}$fSyncTarget${RESET} started to reboot at $(getCurrentTime)"
                if [ -n "$fBuildTimeFormatted" ]; then
                    echo -e " (BT: ${LIGHTYELLOW}$fBuildTimeFormatted${RESET})"
                else
                    echo
                fi
                exit 0
            fi
            ;;
        "$EMAXTRIES")
            echo "$USER_NOTATION Failed to sync $fSyncFile to $fSyncTarget after $maxSyncRetries attempts"
            exit $EMAXTRIES
            ;;
        "$EPERMDENIED")
            echo -e "$USER_NOTATION ${LIGHTYELLOW}Enabling the admin-scp for you intelligently${RESET}"
            expect -c "
                set RESET       \"\033\[0m\"
                set BOLD        \"\033\[1m\"
                set RED         \"\033\[31m\"
                set GREEN       \"\033\[32m\"
                set LIGHTGREEN  \"\033\[92m\"
                set YELLOW      \"\033\[33m\"
                set LIGHTYELLOW \"\033\[93m\"
                set BLUE        \"\033\[34m\"
                set MAGENTA     \"\033\[35m\"
                set CYAN        \"\033\[36m\"
                set GREY        \"\033\[90m\"
                set COLOR       \$MAGENTA

                set has_vdom 0
                spawn -noecho ssh -p $fSyncPort $fSyncUsername@$fSyncTarget
                expect {
                    -nocase {Password:} {
                        send \"$fSyncPassword\r\"
                        exp_continue
                    }
                    -re {$fPoundPattern} {
                        # just pass
                    }
                    timeout {
                        puts stderr \"$USER_NOTATION Timeout. Action aborted.\"
                        exit $ETIMEOUT
                    }
                }

                send \"config global\r\"
                expect {
                    -re {Command fail.|not found,} {
                        puts stderr \"$USER_NOTATION \${BLUE}This device does not support vdom. Roll back to normal mode.\${RESET}\"
                    }
                    -re {$fPoundPattern} {
                        set has_vdom 1
                    }
                    timeout {
                        puts stderr \"$USER_NOTATION Timeout. Action aborted.\"
                        exit $ETIMEOUT
                    }
                }

                send \"config system global\r\"
                expect -re {$fPoundPattern}
                send \"set admin-scp enable\r\"
                expect -re {$fPoundPattern}

                send \"end\r\"
                expect -re {$fPoundPattern}
                if {\$has_vdom != 0} {
                    send \"end\r\"
                    expect -re {$fPoundPattern}
                }

                send \"exit\r\"
                expect eof
            "
            echo -e "$USER_NOTATION ${MAGENTA}Please re-run the sync command again.${RESET}"
            exit $ESUCCESS
            ;;
        "$ETIMEOUT")
            echo "$USER_NOTATION Timeout to sync $fSyncFile to $fSyncTarget"
            exit $ETIMEOUT
            ;;
        *)
            echo "$USER_NOTATION Failed to sync $fSyncFile to $fSyncTarget"
            exit $EFAILED
            ;;
    esac
}

switchFortidev() {
    if [ "$fPlatform" == "FPX" ]; then
        if command -v jdev &> /dev/null; then
            echo -e "$USER_NOTATION Invoking ${LIGHTGREEN}jdev${RESET} to switch to Fortidev 6"
            jdev -6
        else
            echo -e "$USER_NOTATION ${LIGHTYELLOW}jdev is not installed. Skipping.${RESET}"
            exit
        fi
    fi
}

main () {
    preConfigure "$@"
    showLogo
    printBuildFlags
    cleanTheRepo
    switchFortidev # Only needed for building FPX temporary
    runConfigure
    runBuildCommands
    rmWriteFromJson
    runSyncCommands
}

main "$@"
