#!/bin/bash

# Constants
SCRIPTNAME=$(basename $0)
# Set the backup destination directory
MAIN_BACKUP_DIR="/data/Backup/vms"
fBackupCandidates=()
fBackedUpVms=()
fAllVms=
# Color definitions
MAGENTA='\033[35m'
LIGHTYELLOW='\033[1;33m'
RESET='\033[0m'
GREEN='\033[32m'
COLOR=$MAGENTA

# Display help information
showHelp() {
    cat << _EOF
Usage: $SCRIPTNAME [OPTIONS] [VM_NAME1] [VM_NAME2] ...
Arguments:
    VM_NAME              Name of the virtual machine to backup (optional)
                         Use -a to backup all VMs

Options:
    -h, --help           Display this help message and exit
    -d, --debug          Enable debug output
    -b, --backup DIR     Set custom backup directory (default: $MAIN_BACKUP_DIR)

Description:
    This script creates backups of virtual machine disk images and configuration files

Example:
    $SCRIPTNAME                   Backup all VMs
    $SCRIPTNAME client1           Backup only the VM named 'client1'
    $SCRIPTNAME client1 fpx1      Backup only the VM named 'client1' and 'fpx1'
    $SCRIPTNAME -b /tmp/backup    Backup all VMs to /tmp/backup

_EOF
    exit 0
}

parseOptions() {
    # Define short and long options
    SHORTOPTS="hdb:a"
    LONGOPTS="help,debug,backup:,all"

    # Use getopt to parse command-line options
    if ! PARSED=$(getopt --options $SHORTOPTS --longoptions "$LONGOPTS" --name "$SCRIPTNAME" -- "$@"); then
        echo -e "${COLOR}Error: Failed to parse command-line options.${RESET}" >&2
        exit 1
    fi

    # Reset positional parameters to the parsed values
    eval set -- "$PARSED"

    # Parse options
    while true; do
        case "$1" in
            -h|--help)
                showHelp
                ;;
            -d|--debug)
                set -x
                shift
                ;;
            -b|--backup)
                MAIN_BACKUP_DIR="$2"
                shift 2
                ;;
            -a|--all)
                fAllVms=true
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                echo -e "${COLOR}Invalid option: $1${RESET}"
                exit 1
                ;;
        esac
    done

    COLOR=$LIGHTYELLOW
    local availLibvirtVms=()  # Available libvirt VMs
    mapfile -t availLibvirtVms < <(virsh list --all --name | grep -v "^$")
    if [ -n "$1" ]; then
        local reqVms=("$@")
        local found

        for vm in "${reqVms[@]}"; do
            found=false
            for avm in "${availLibvirtVms[@]}"; do
                if [ "$vm" = "$avm" ]; then
                    found=true
                    break
                fi
            done
            if [ "$found" = true ]; then
                fBackupCandidates+=("$vm")
            else
                echo -e "${COLOR}Warning: VM '$vm' not found in libvirt.${RESET}"
            fi
        done

        if [ ${#fBackupCandidates[@]} -eq 0 ]; then
            echo -e "${COLOR}Warning: None of the specified VMs were found in libvirt.${RESET}"
        fi
    else
        if [ -n "$fAllVms" ]; then
            fBackupCandidates=("${availLibvirtVms[@]}")
        else
            echo -e "${COLOR}Error: No VMs specified.${RESET}"
            showHelp
        fi
    fi
    COLOR=$MAGENTA
}

backupVms() {
    if [ ! -d "$MAIN_BACKUP_DIR" ]; then
        echo -e "${COLOR}Creating backup directory: $MAIN_BACKUP_DIR${RESET}"
        if ! mkdir -p "$MAIN_BACKUP_DIR"; then
            echo -e "${LIGHTYELLOW}Error: Failed to create backup directory.\n${RESET}"
            exit 1
        fi
    fi

    # Loop through the VMs and create backups
    for vm in "${fBackupCandidates[@]}"; do
        [ -z "$vm" ] && continue
        echo -e "${COLOR}Backing up VM: $vm${RESET}"
        if ! virsh list --all --name | grep -q "^$vm$"; then
            echo -e "${LIGHTYELLOW}Error: VM '$vm' not found.\n${RESET}"
            continue
        fi
        fBackedUpVms+=("$vm")

        bkVmDir="$MAIN_BACKUP_DIR/$vm"
        [ ! -d "$bkVmDir" ] && mkdir -p "$bkVmDir"

        local vmDiskImagePath bkVmDiskImagePath qemuXmlPath bkQemuXmlPath vmImageName
        read -r _ vmDiskImagePath <<< "$(virsh domblklist "$vm" | awk '/vda|hda/')"
        qemuXmlPath="/etc/libvirt/qemu/$vm.xml"
        if [ -n "$vmDiskImagePath" ]; then
            # Backup VM snapshots
            vmSnapshotDir="/var/lib/libvirt/qemu/snapshot/$vm"
            if [ -d "$vmSnapshotDir" ]; then
                bkVmSnapshotDir="$bkVmDir/snapshots"
                echo -e "${GREEN}VM snapshots: ${RESET}$vmSnapshotDir => $bkVmSnapshotDir"
                sudo rsync -aPv "$vmSnapshotDir/" "$bkVmSnapshotDir" --delete
            fi

            vmImageName="$(basename "$vmDiskImagePath")"
            bkVmDiskImagePath="$bkVmDir/$vmImageName"
            bkQemuXmlPath="$bkVmDir/$vm.xml"
            echo -e "${GREEN}Disk Image: ${RESET}$vmDiskImagePath => $bkVmDiskImagePath"
            echo -e "${GREEN}XML path:   ${RESET}$qemuXmlPath => $bkQemuXmlPath"

            sudo rsync -aPv "$qemuXmlPath" "$bkQemuXmlPath"
            sudo rsync -aPv "$vmDiskImagePath" "$bkVmDiskImagePath"
        else
            echo -e "${LIGHTYELLOW}Error: Source path is empty for VM $vm\n${RESET}"
        fi
    done
}

summary() {
    [ ${#fBackedUpVms[@]} -eq 0 ] && return
    echo -e "${COLOR}\nBacked Up VMs:${RESET}"
    echo -e "----------"
    for vm in "${fBackedUpVms[@]}"; do
        echo -e -n "  - ${LIGHTYELLOW}$vm${RESET}"
        echo -e " (${GREEN}To: ${MAIN_BACKUP_DIR}/${vm}${RESET})"
    done
    echo
}

main() {
    parseOptions "$@"
    backupVms
    summary
}

main "$@"
