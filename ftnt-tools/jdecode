#!/usr/bin/env python3
import os
import sys
import subprocess
import argparse

# ANSI escape codes for colors defined at global scope
GREEN = '\033[92m'
RED = '\033[91m'
LIGHTYELLOW = '\033[93m'
GREY = '\033[90m'
BLUE = '\033[94m'
CYAN = '\033[96m'
MAGENTA = '\033[95m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
RESET = '\033[0m'

class JDECODE:
    def __init__(self):
        self.script_name = os.path.basename(sys.argv[0])
        self.version = "0.1.0"
        self.exe_file_path = "./sysinit/init"
        self.crash_log_path = "/data/bugzilla/crash.txt"
        self.crash_decode_output = "/data/bugzilla/crash_decoded.txt"
        self.no_write = False
        self.no_verbose = False
        self.parse_arguments()

    def parse_arguments(self):
        parser = argparse.ArgumentParser(
            prog=self.script_name,
            description=f"Crash Log Decoder v{self.version}\n\n"
                "Examples:\n"
                f"  {self.script_name} --exe ./sysinit/init --crash /data/bugzilla/crash.txt -v\n"
                f"  {self.script_name} --no-write",
            formatter_class=argparse.RawTextHelpFormatter,  # Preserves newlines in help text
            add_help=True
        )

        # Add arguments
        parser.add_argument('-e', '--exe', dest='exe_file_path', help='Path to the executable file')
        parser.add_argument('-c', '--crash', dest='crash_log_path', help='Path to the crash log file')
        parser.add_argument('-o', '--output', dest='crash_decode_output', help='Path to the crash decode output file')
        parser.add_argument('--no-verbose', dest='no_verbose', action='store_true', help='Disable verbose mode')
        parser.add_argument('--no-write', dest='no_write', action='store_true', help='Do not write output to file')

        # Parse arguments
        args, remaining = parser.parse_known_args()
        if args.exe_file_path:
            self.exe_file_path = args.exe_file_path
        if args.crash_log_path:
            self.crash_log_path = args.crash_log_path
        if args.crash_decode_output:
            self.crash_decode_output = args.crash_decode_output
        if args.no_verbose:
            self.no_verbose = True
        if args.no_write:
            self.no_write = True

        # expanduser() expands '~' to the user's home directory
        self.exe_file_path = os.path.expanduser(self.exe_file_path)
        self.crash_log_path = os.path.expanduser(self.crash_log_path)
        self.crash_decode_output = os.path.expanduser(self.crash_decode_output)

    def verify_exe_file(self):
        print(f"\n{BOLD}❯ {CYAN}Verifying executable:{RESET} {GREEN}{self.exe_file_path}{RESET}")
        if not os.path.exists(self.exe_file_path):
            print(f"{RED}✖ Error: {self.exe_file_path} does not exist{RESET}")
            sys.exit(1)
        # -nx: prevents GDB from reading the .gdbinit initialization file.
        # cmd = ['gdb', self.exe_file_path, '-q', '-batch', '-nx', '-ex', 'quit']
        cmd = ['gdb', self.exe_file_path, '-q', '-batch', '-ex', 'quit']
        try:
            subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            print(f"{GREY}✓ Executable verified successfully{RESET}")
        except Exception as e:
            print(f"{RED}✖ {e}{RESET}")
            sys.exit(1)

    def start_decoding(self, pointer, f):
        cmd = ['gdb', self.exe_file_path, '-q', '-batch', '-nx', '-ex', 'list *' + pointer, '-ex', 'quit']
        try:
            result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        except Exception as e:
            print(f"{RED}✖ {e}{RESET}")
            sys.exit(1)

        if result.returncode == 0:
            # Split the output into lines
            lines = result.stdout.split('\n')

            # Print the first and middle lines if the verbose flag is set
            if lines:
                first_line = lines[0]
                middle_line_index = len(lines) // 2
                middle_line = lines[middle_line_index] if middle_line_index < len(lines) else ""

                combined_line = f"{MAGENTA}▶ {first_line}{RESET}"
                if not self.no_verbose and middle_line:
                    combined_line = f"{MAGENTA}▶ {first_line}{RESET}\n{BLUE}{middle_line}{RESET}"
                print(combined_line)
                if not self.no_write:
                    f.write(f"{first_line}\n")
                    if not self.no_verbose and middle_line:
                        f.write(f"{middle_line}\n")
                    f.flush()
        else:
            print(f"{RED}✖ Error running GDB command:{RESET}")
            print(f"  {result.stderr}")

    def read_crash_file(self):
        print(f"{BOLD}❯ {CYAN}Reading crash file:{RESET} {GREEN}{self.crash_log_path}{RESET}")
        if not os.path.exists(self.crash_log_path):
            print(f"{RED}✖ Error: '{self.crash_log_path}' does not exist{RESET}")
            sys.exit(1)
        try:
            with open(self.crash_log_path, "r") as f:
                lines = f.readlines()
                print(f"{GREY}✓ Found {len(lines)} lines in crash file{RESET}")
                return lines
        except Exception as e:
            print(f"{RED}✖ Error reading crash file: {e}{RESET}")
            sys.exit(1)

    # Function to check if a line contains a function pointer
    def extract_func_pointer(self, line):
        if line.strip() != "":
            for s in line.split():
                # add the check len(s) == 12 to avoid the case like [0x7f4a1850fdeb].
                if len(s) <= 12 and s[0] == '[' and s[-1] == ']':
                    return s[1:-1]
        return ""

    def run(self):
        print(f"{BOLD}{CYAN}══════════════════════════════════════{RESET}")
        print(f"{BOLD}{CYAN} JDECODE CRASH LOG DECODER{RESET}")
        print(f"{BOLD}{CYAN}══════════════════════════════════════{RESET}")

        # Print arguments in a more structured way
        print(f"{BOLD}{LIGHTYELLOW}▼ Configuration{RESET}")
        print(f"  {BLUE}Write to file:{RESET}    {'No' if self.no_write else 'Yes'}")
        print(f"  {BLUE}Verbose mode:{RESET}     {'No' if self.no_verbose else 'Yes'}")
        print(f"  {BLUE}Executable:{RESET}       {self.exe_file_path}")
        print(f"  {BLUE}Crash log:{RESET}        {self.crash_log_path}")
        if not self.no_write:
            print(f"  {BLUE}Decoded Output:{RESET}   {self.crash_decode_output}")

        self.verify_exe_file()
        crash_lines = self.read_crash_file()

        f = None
        if not self.no_write:
            # 'w+' will create the file if it doesn't exist
            try:
                print(f"{BOLD}❯ {CYAN}Preparing output file:{RESET} {GREEN}{self.crash_decode_output}{RESET}")
                output_dir = os.path.dirname(self.crash_decode_output)
                if output_dir and not os.path.exists(output_dir):
                    os.makedirs(output_dir)

                f = open(self.crash_decode_output, 'w+')
                print(f"{GREY}✓ Output file ready{RESET}")
            except Exception as e:
                print(f"{RED}✖ Error creating output file: {e}{RESET}")
                self.no_write = True

        print(f"\n{BOLD}❯ {CYAN}Starting decode process...{RESET}")
        print(f"{BOLD}{'─' * 50}{RESET}")

        pointer_count = 0
        for line in crash_lines:
            # Check if the line contains a function pointer
            pointer = self.extract_func_pointer(line)
            if pointer != "":
                pointer_count += 1
                self.start_decoding(pointer, f)
            else:
                # Print the line as is if it doesn't contain a function pointer
                print(f"  {line.strip()}")
                if not self.no_write:
                    f.write(line)
                    f.flush()

        print(f"{BOLD}{'─' * 50}{RESET}")
        if not self.no_write:
            f.close()
            print(f"\n{CYAN}✓ Done! {pointer_count} pointers decoded.{RESET}")
            print(f"  Output saved to: {BOLD}{self.crash_decode_output}{RESET}\n")
        else:
            print(f"\n{CYAN}✓ Completed! {pointer_count} pointers decoded.{RESET}\n")

# Entry point for the script
if __name__ == "__main__":
    jdecode = JDECODE()
    jdecode.run()
