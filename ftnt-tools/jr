#!/usr/bin/env bash
# set -x

# Global Variables
fEditor="code"
fDebug=
fRgOnly=
fCheckDepends=
fNoClipboard=
fzfSelected=
fQuery=
fKernelIncluded=  # Include the linux kernel source code in the search
# Constants
SCRIPTNAME=$(basename $0)
SEPARATOR_LEFT="<---------------------------------------------------"
SEPARATOR_RIGHT="--------------------------------------------------->"
USER_NOTATION="@@@@"
# Colors
MAGENTA='\033[35m'
NORMAL='\033[0m'
BOLD='\033[1m'
BLUE='\033[34m'
RESET='\033[0m'
COLOR=$MAGENTA

usage() {
    cat << _EOF
Usage: $SCRIPTNAME [OPTIONS] [SEARCH_TERM]

This script requires the following dependencies:
- rg (ripgrep)
- fzf (fuzzy finder)
- bat (cat replacement)
- xsel (clipboard manager)
- code/vim

Run this script with the --check-depends option to check if these dependencies are installed.

Options:
    -h, --help               Print this help message
    -r, --rg-only            Only use rg to search, not use fzf
    -k, --kernel             Include the linux kernel source code in the search
    -v, --vim                Open the file with vim (default is $fEditor)
    -c, --check-depends      Check if dependencies are installed
    -n, --no-clipboard       Do not use clipboard content as the search term
    -d, --debug              Print debug information

Example: $SCRIPTNAME wad_tcp_bind
         $SCRIPTNAME --kernel

_EOF
    exit 1
}

parseOptions() {
    # Define short and long options
    SHORTOPTS="hvdrkcn"
    LONGOPTS="help,vim,debug,kernel,rg-only,check-depends, no-clipboard"

    # Use getopt to parse command-line options
    if ! PARSED=$(getopt --options $SHORTOPTS --longoptions "$LONGOPTS" --name "$0" -- "$@"); then
        echo -e "$USER_NOTATION ${COLOR}Error: Failed to parse command-line options.${RESET}" >&2
        exit 1
    fi

    # Reset positional parameters to the parsed values
    eval set -- "$PARSED"

    # Parse options
    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            -v|--vim)
                fEditor="vim"
                shift
                ;;
            -d|--debug)
                fDebug=true
                shift
                ;;
            -k|--kernel)
                fKernelIncluded=true
                shift
                ;;
            -c|--check-depends)
                fCheckDepends=true
                shift
                ;;
            -n|--no-clipboard)
                fNoClipboard=true
                shift
                ;;
            -r|--rg-only)
                fRgOnly=true
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                echo -e "$USER_NOTATION ${COLOR}Invalid option: $1${RESET}"
                exit 1
                ;;
        esac
    done

    fQuery="$*"
}

checkDepends() {
    local missing_deps=()
    local dependencies=("rg" "fzf" "bat" "xsel" "$fEditor")

    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing_deps+=("$dep")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "Error: The following dependencies are not installed: ${COLOR}${missing_deps[*]}${RESET}"
        exit 1
    fi
}

# In X11, there are three primary selections (clipboard buffers):
#
# 1. PRIMARY
#    - Default selection in X11
#    - Used for middle-click paste (Shift+Insert in terminals)
#    - Example: Highlighting text automatically copies it to PRIMARY
#
# 2. CLIPBOARD
#    - Behaves like the traditional clipboard (Ctrl+C / Ctrl+V)
#    - Used by most GUI applications (e.g., Firefox, LibreOffice)
#
# 3. SECONDARY
#    - Rarely used, mainly for legacy applications
GetClipboardContent() {
    if [ -z "$fQuery" ] && [ -n "$DISPLAY" ]; then
        # Get clipboard content, remove newlines, and clear the clipboard
        fQuery=$(xsel -o -p 2> /dev/null)
        if [ -n "$fQuery" ]; then
            xsel -c -p 2> /dev/null
            if [[ $? -ne 0 ]]; then
                echo -e "${COLOR}Error: Failed to clear PRIMARY clipboard content${RESET}"
                exit 1
            fi
        fi
    fi
}

polishQuery() {
    # Round 1
    fQuery="${fQuery%%$'\n'*}"                    # Remove everything after the first newline
    fQuery="${fQuery#"${fQuery%%[![:space:]]*}"}" # Left trim
    fQuery="${fQuery%"${fQuery##*[![:space:]]}"}" # Right trim
    [ -z "$fQuery" ] && return
    # Round 2
    fQuery="${fQuery:0:50}"       # Truncate to max 50 characters
    fQuery="${fQuery//[&!;<\\]/}" # Remove special characters
    fQuery="${fQuery%>}"          # Remove trailing '>' if present
    fQuery="${fQuery%:[0-9]*}"    # Remove trailing colon and numbers
    fQuery="${fQuery#func=}"      # Remove leading 'func=' if present
}

fuzzySearch() {
    # '--glob' '*.{c,h,cpp,js,ts,py,html,css,sh,php}'
    # rg: -F, --fixed-strings Treat the pattern as a literal string
    local rgParams=(
        '--smart-case'
        '--color=ansi'
        '--colors' 'match:fg:204,51,153'
        '--colors' 'match:style:bold'
        '--line-number'
        '--no-heading'
        '--glob' '!fpx-sync/*'
        '--glob' '!linux-3.2.16/*'
        '--fixed-strings'
    )
    local fzfParams=(
        '--ansi'
        '--color' 'hl:-1:underline,hl+:-1:underline:reverse'
        '--delimiter' ':'
        '--preview' 'bat --color=always {1} --theme=TwoDark --highlight-line {2}'
        '--preview-window' 'top,60%,border-bottom,+{2}+3/3,~3'
        '--cycle'
        '--exit-0'
    )

    [ -z "$fKernelIncluded" ] && rgParams+=('--glob' '!linux-*/*')
    rgParams+=("${fQuery:-.}")
    [ -n "$fQuery" ] && fzfParams+=('--query' "${fQuery}")

    # Debugging
    if [ -n "$fDebug" ]; then
        echo $SEPARATOR_RIGHT
        # ${array[*]} => Expands to a single string where all elements are joined together
        # ${array[@]} => Expands to a list of individual elements
        # TODO: Print the array with either echo or printf will remove all the original single quotes.
        echo -e "rgQuery: ${COLOR}${rgParams[*]}${RESET}"
        echo -e "fzfQuery: ${COLOR}${fzfParams[*]}${RESET}"
    fi

    if [ -n "$fRgOnly" ]; then
        echo $SEPARATOR_LEFT
        rg "${rgParams[@]}"
        exit 0
    fi

    # Unified search and selection
    fzfSelected=$(rg "${rgParams[@]}" | fzf "${fzfParams[@]}")

    if [ -z "$fzfSelected" ]; then
        [ -n "$fQuery" ] && echo -e "No result found or selected for query: ${COLOR}$fQuery${RESET}" >&2
        [ -n "$fDebug" ] && echo $SEPARATOR_LEFT
        exit 0
    fi

    # Sample output of fzfResult:
    # daemon/wad/wad_app_eng.c:3071:          goto session_make_failed;
    # or
    # Z15 Bug 0996624 FTP fails active in TP mode/debug2_passive.c:398:CLNT lftp/4.9.2
    local filepath linenumber
    pattern='([^:]+):([0-9]+):'
    if [[ $fzfSelected =~ $pattern ]]; then
        filepath="${BASH_REMATCH[1]}"
        linenumber="${BASH_REMATCH[2]}"
    else
        echo -e "${COLOR}Error: The result is in unexpected format${RESET}"
        exit 1
    fi

    # Escape spaces in filepath
    filepath="${filepath// /\\ }"

    if [ -n "$fDebug" ]; then
        echo -e "fzf select: ${COLOR}$fzfSelected${RESET}"
        echo -e "filepath:   ${COLOR}$filepath${RESET}"
        echo -e "linenumber: ${COLOR}$linenumber${RESET}"
        echo $SEPARATOR_LEFT
    fi

    if [[ "$fEditor" == "vim" ]]; then
        vim +"$linenumber" "$filepath"
    else
        "$fEditor" "$filepath":"$linenumber"
    fi
}

main() {
    parseOptions "$@"
    [ -n "$fCheckDepends" ] && checkDepends
    [ -z "$fNoClipboard" ]  && GetClipboardContent
    polishQuery
    fuzzySearch

    # Final output
    if [ -n "$fzfSelected" ];
    then
        # echo -e "Query: ${COLOR}${fQuery}${RESET}"
        echo -e "Line opened: ${COLOR}${fzfSelected:0:80}${RESET}"
    fi
}

main "$@"
