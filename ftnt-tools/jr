#!/usr/bin/env bash
# set -x

# Constants
SCRIPTNAME=$(basename $0)
SEPARATOR_LEFT="<---------------------------------------------------"
SEPARATOR_RIGHT="--------------------------------------------------->"
USER_NOTATION="@@@@"
# Variables
fEditor="code"
fDebug=
fOnlyRg=
fzfSelected=
fQuery=
fKernelIncluded=  # Include the linux kernel source code in the search
# Colors
MAGENTA='\033[35m'
NORMAL='\033[0m'
BOLD='\033[1m'
BLUE='\033[34m'
RESET='\033[0m'
COLOR=$MAGENTA

usage() {
    cat << _EOF
Usage: $SCRIPTNAME [OPTIONS] [SEARCH_TERM]

Options:
    -h, --help               Print this help message
    -r, --rg-only            Only use rg to search, not use fzf
    -k, --kernel             Include the linux kernel source code in the search
    -v, --vim                Open the file with vim (default is $fEditor)
    -d, --debug              Print debug information

Example: $SCRIPTNAME wad_tcp_bind
         $SCRIPTNAME --kernel

_EOF
    exit 1
}

# Define short and long options
SHORTOPTS="hvdrk"
LONGOPTS="help,vim,debug,kernel,rg-only"

# Use getopt to parse command-line options
if ! PARSED=$(getopt --options $SHORTOPTS --longoptions $LONGOPTS --name "$0" -- "$@"); then
    echo -e "$USER_NOTATION ${COLOR}Error: Failed to parse command-line options.${RESET}" >&2
    exit 1
fi

# Reset positional parameters to the parsed values
eval set -- "$PARSED"

# Parse options
while true; do
    case "$1" in
        -h|--help)
            usage
            ;;
        -v|--vim)
            fEditor="vim"
            shift
            ;;
        -d|--debug)
            fDebug=true
            shift
            ;;
        -k|--kernel)
            fKernelIncluded=true
            shift
            ;;
        -r|--rg-only)
            fOnlyRg=true
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo -e "$USER_NOTATION ${COLOR}Invalid option: $1${RESET}"
            exit 1
            ;;
    esac
done

fQuery="$*"

# Only need to run for the first time
checkDependencies() {
    local dependencies=("rg" "fzf" "bat" "$fEditor")

    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            echo -e "$USER_NOTATION Error: ${COLOR}$dep${RESET} is not installed."
            exit 1
        fi
    done
}

parserAndPolish() {
    [[ -z "$fQuery" ]] && return
    local param
    param=$(echo "$fQuery" | sed -E 's/^[[:space:]]*|[[:space:]]*$//g; s/^[&!]//; s/;$//; s/^<|>$//g; s/:[0-9]+$//; s/^func=//')
    fQuery="$param"
}

searchAndOpen() {
    # --glob='*.{c,h,cpp,js,ts,py,html,css,sh,php}'
    local kernelSearch="--glob='!linux-*/*'"
    local rgParams="--smart-case \
                    --color=ansi \
                    --colors 'match:fg:204,51,153' --colors 'match:style:bold' \
                    --line-number \
                    --no-heading \
                    --glob='!fpx-sync/*' \
                    --glob='!linux-3.2.16/*' \
                   "
    local fzfParams="--ansi \
                     --color 'hl:-1:underline,hl+:-1:underline:reverse' \
                     --delimiter ':' \
                     --preview 'bat --color=always {1} --theme=\"TwoDark\" --highlight-line {2}' \
                     --preview-window 'top,60%,border-bottom,+{2}+3/3,~3' \
                     --cycle \
                    "
    if [ -z "$fKernelIncluded" ]; then
        rgParams="$rgParams $kernelSearch"
    fi

    # Squash multiple whitespaces
    rgParams=$(echo "$rgParams" | tr -s ' ')
    fzfParams=$(echo "$fzfParams" | tr -s ' ')

    # Make the query command
    rgQuery="rg $rgParams \"$fQuery\""
    # Remove the backslashes from the fzf query. Only fzf needs to remove the backslashes
    fzfQuery="fzf $fzfParams --query \"${fQuery//\\/}\""

    # Debugging
    if [ -n "$fDebug" ]; then
        echo $SEPARATOR_RIGHT
        echo -e "rgQuery: ${COLOR}$rgQuery${RESET}"
        echo -e "fzfQuery: ${COLOR}$fzfQuery${RESET}"
    fi

    if [ -z "$fQuery" ]; then
        fzfSelected=$(eval "$rgQuery" | eval "$fzfQuery")
    else
        rgResult=$(eval "$rgQuery")
        if [ -z "$rgResult" ]; then
            echo -e "No result found for query: ${COLOR}$fQuery${RESET}"
            exit 1
        fi
        [ -n "$fOnlyRg" ] && echo "$rgResult" && exit 0
        fzfSelected=$(echo "$rgResult" | eval "$fzfQuery")
    fi

    [ -z "$fzfSelected" ] && exit 0

    # Sample output of fzfResult:
    # daemon/wad/wad_app_eng.c:3071:          goto session_make_failed;
    # or
    # Z15 Bug 0996624 FTP fails active in TP mode/debug2_passive.c:398:CLNT lftp/4.9.2
    # Replace the space with '\ ' for the file path
    fzfSelected="${fzfSelected// /\\ }"
    pattern='([^:]+):([0-9]+):'
    if [[ $fzfSelected =~ $pattern ]]; then
        filepath="${BASH_REMATCH[1]}"
        linenumber="${BASH_REMATCH[2]}"
    else
        echo -e "${COLOR}Error: The result is in unexpected format${RESET}"
        exit 1
    fi

    if [ -n "$fDebug" ]; then
        echo -e "fzf select: ${COLOR}$fzfSelected${RESET}"
        echo -e "filepath:   ${COLOR}$filepath${RESET}"
        echo -e "linenumber: ${COLOR}$linenumber${RESET}"
        echo $SEPARATOR_LEFT
    fi

    if [ "$fEditor" == "vim" ]; then
        eval $fEditor +"${linenumber}" "$filepath"
        exit 0
    else
        eval $fEditor "$filepath":"$linenumber"
    fi
}

# checkDependencies
parserAndPolish
searchAndOpen

if [ -n "$fzfSelected" ];
then
    echo -e "Line opened: ${COLOR}${fzfSelected:0:80}${RESET}"
fi