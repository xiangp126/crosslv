#!/bin/bash
# set -x

fArgs=("--goto")
fForceSearchCodeBin=
fDebug=
SCRIPTNAME=$(basename $0)
MAGENTA='\033[0;35m'
RESET='\033[0m'

usage() {
    cat << EOF
Usage: $SCRIPTNAME [options] <args>

Description:
    A wrapper script for the VS Code server CLI.
    It finds the VS Code server CLI binary and set the correct IPC socket.
    The reason for this script is to avoid the bug which has never been fixed by Microsoft:
    # Unable to connect to VS Code server: Error in request - ENOENT /run/user/1000/vscode-ipc-*.sock
    https://github.com/microsoft/vscode-remote-release/issues/6997#issue-1319650016
    https://github.com/microsoft/vscode-remote-release/issues/6362#issuecomment-1046458477

Options:
    -h, --help      Show this help message and exit
    -f, --force     Force search for the code binary, ignoring \$VSCODE_BIN_PATH
    -d, --debug     Enable debug mode (set -x)

Example: $SCRIPTNAME --force
         $SCRIPTNAME -d
         $SCRIPTNAME -h

EOF
    exit 0
}

parseOptions() {
    SHORTOPTS="hfdv"
    LONGOPTS="help,force,debug,version"
    if ! PARSED=$(getopt --options $SHORTOPTS --longoptions "$LONGOPTS" --name "$0" -- "$@"); then
        echo -e "${MAGENTA}Error: Failed to parse command-line options.${RESET}" >&2
        exit 1
    fi
    eval set -- "$PARSED"
    while true; do
        case "$1" in
            -h|--help)
                usage
                ;;
            -d|--debug)
                fDebug=true
                shift
                ;;
            -f|--force)
                fForceSearchCodeBin=true
                shift
                ;;
            -v|--version)
                fArgs+=("--version")
                shift
                ;;
            --)
                shift
                break
                ;;
            *)
                echo -e "${MAGENTA}Invalid option: $1${RESET}" >&2
                exit 1
        esac
    done
    [ -n "$1" ] && fArgs+=("$1")
}

preCheck() {
    if declare -F setCodePath > /dev/null; then
        return
    fi
    setCodePath() {
        [ -z "$VSCODE_IPC_HOOK_CLI" ] && return
        local paths searchDir count version syspath newIPCHooK
        local -A map=()
        local MAGENTA='\033[0;35m'
        local LIGHTYELLOW='\033[93m'
        local RESET='\033[0m'
        syspath="/run/user/$UID"
        searchDir="$HOME/.vscode-server/cli"

        readarray -d '' paths < <(find "$searchDir" -type f -name code -executable -print0)
        count=${#paths[@]}
        if [[ $count -eq 0 ]]; then
            echo -e "${MAGENTA}Error: No code binary found under $searchDir${RESET}" >&2
        elif [[ $count -gt 1 ]]; then
            echo -e "${LIGHTYELLOW}Error: Please remove the older versions of code.${RESET}" >&2
            for path in "${paths[@]}"
            do
                version=$("$path" --version | head -n 1 | grep -oP '[0-9]+\.[0-9]+\.[0-9]+')
                map["$path"]=$version
            done
            for path in "${!map[@]}"
            do
                echo -e "${MAGENTA}${map[$path]}${RESET} : $path"
            done
        fi

        # Get the most recenely created/modified vscode-ipc-*.sock file
        newIPCHooK=$(find "$syspath" -maxdepth 1 -type s -name 'vscode-ipc-*.sock' -printf '%T@ %p\n' 2>/dev/null | sort -nr | head -n 1 | cut -d' ' -f2-)
        if [[ -z $newIPCHooK ]]
        then
            echo -e "${MAGENTA}Error: No vscode-ipc-*.sock file found in $syspath${RESET}" >&2
        fi

        # Remove unused vscode-ipc-*.sock files
        find "$syspath" -maxdepth 1 -type s -name "vscode-ipc-*.sock" ! -wholename "$newIPCHooK" -delete

        # VSCODE_IPC_HOOK_CLI is an environment variable that is used by the VS Code CLI to communicate with the server.
        # But you have to remember that only the sub shell can see the new value.
        export VSCODE_IPC_HOOK_CLI=$newIPCHooK
        export VSCODE_BIN_PATH="${paths[0]}"
    }
}

main() {
    preCheck
    parseOptions "$@"
    [ -n "$fDebug" ] && set -x
    [ -z "$VSCODE_BIN_PATH" ] || [ -n "$fForceSearchCodeBin" ] && setCodePath
    for _ in {1..2}; do
        "$VSCODE_BIN_PATH" "${fArgs[@]}"
        if [[ $? -eq 0 ]]; then
            break
        else
            setCodePath
        fi
    done
}

main "$@"
